
Mcu2_Uart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001928  08001928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001950  08001950  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001950  08001950  00011950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001958  08001958  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800195c  0800195c  0001195c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08001970  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001970  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cfc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010b9  00000000  00000000  00025d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000590  00000000  00000000  00026df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f8  00000000  00000000  00027388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fa4b  00000000  00000000  00027880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fd1  00000000  00000000  000472cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c09e7  00000000  00000000  0004c29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cc83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001598  00000000  00000000  0010cd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001910 	.word	0x08001910

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001910 	.word	0x08001910

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SysTick_Handler>:
 */

#include "stm32f4xx_hal.h"

void SysTick_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004dc:	f000 f996 	bl	800080c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004e0:	f000 fac5 	bl	8000a6e <HAL_SYSTICK_IRQHandler>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <main>:
UART_HandleTypeDef usart2Handle;

char *userData = "The application is running\r\n";

int main(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b09d      	sub	sp, #116	; 0x74
 80004ec:	af00      	add	r7, sp, #0
	HAL_Init();
 80004ee:	f000 f93b 	bl	8000768 <HAL_Init>
	SystemClockConfig();
 80004f2:	f000 f849 	bl	8000588 <SystemClockConfig>
	Usart2_Init();
 80004f6:	f000 f84f 	bl	8000598 <Usart2_Init>

	uint16_t dataLength = strlen(userData);
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <main+0x98>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	HAL_UART_Transmit(&usart2Handle, (uint8_t *) userData, dataLength, HAL_MAX_DELAY);
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <main+0x98>)
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	481b      	ldr	r0, [pc, #108]	; (8000584 <main+0x9c>)
 8000518:	f000 fcd1 	bl	8000ebe <HAL_UART_Transmit>


	uint8_t receivedData;
	uint8_t dataBuffer[100];
	uint32_t count = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	66fb      	str	r3, [r7, #108]	; 0x6c
	while(1)
	{
		HAL_UART_Receive(&usart2Handle, &receivedData, 1, HAL_MAX_DELAY);
 8000520:	f107 0169 	add.w	r1, r7, #105	; 0x69
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	2201      	movs	r2, #1
 800052a:	4816      	ldr	r0, [pc, #88]	; (8000584 <main+0x9c>)
 800052c:	f000 fd60 	bl	8000ff0 <HAL_UART_Receive>
		if(receivedData == '\r')
 8000530:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000534:	2b0d      	cmp	r3, #13
 8000536:	d00f      	beq.n	8000558 <main+0x70>
		{
			break;
		}
		else
		{
			dataBuffer[count++] = ConvertToCapital(receivedData);
 8000538:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 800053c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800053e:	1c63      	adds	r3, r4, #1
 8000540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000542:	4610      	mov	r0, r2
 8000544:	f000 f851 	bl	80005ea <ConvertToCapital>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000550:	4423      	add	r3, r4
 8000552:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&usart2Handle, &receivedData, 1, HAL_MAX_DELAY);
 8000556:	e7e3      	b.n	8000520 <main+0x38>
			break;
 8000558:	bf00      	nop
		}
	}

	dataBuffer[count++] = '\r';
 800055a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000560:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000564:	4413      	add	r3, r2
 8000566:	220d      	movs	r2, #13
 8000568:	f803 2c6c 	strb.w	r2, [r3, #-108]
	HAL_UART_Transmit(&usart2Handle, dataBuffer, count, HAL_MAX_DELAY);
 800056c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800056e:	b29a      	uxth	r2, r3
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <main+0x9c>)
 8000578:	f000 fca1 	bl	8000ebe <HAL_UART_Transmit>

	while(1);
 800057c:	e7fe      	b.n	800057c <main+0x94>
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000
 8000584:	2000002c 	.word	0x2000002c

08000588 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
//
//	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
//	{
//		ErrorHandler();
//	}
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <Usart2_Init>:

void Usart2_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	usart2Handle.Instance = USART2;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <Usart2_Init+0x44>)
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <Usart2_Init+0x48>)
 80005a0:	601a      	str	r2, [r3, #0]
	usart2Handle.Init.BaudRate = 9600;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <Usart2_Init+0x44>)
 80005a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a8:	605a      	str	r2, [r3, #4]
	usart2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <Usart2_Init+0x44>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
	usart2Handle.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <Usart2_Init+0x44>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
	usart2Handle.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <Usart2_Init+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
	usart2Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <Usart2_Init+0x44>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
	usart2Handle.Init.Mode = UART_MODE_TX_RX;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <Usart2_Init+0x44>)
 80005c4:	220c      	movs	r2, #12
 80005c6:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&usart2Handle) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <Usart2_Init+0x44>)
 80005ca:	f000 fc2b 	bl	8000e24 <HAL_UART_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <Usart2_Init+0x40>
	{
		ErrorHandler();
 80005d4:	f000 f806 	bl	80005e4 <ErrorHandler>
	}
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	40004400 	.word	0x40004400

080005e4 <ErrorHandler>:

void ErrorHandler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	while(1);
 80005e8:	e7fe      	b.n	80005e8 <ErrorHandler+0x4>

080005ea <ConvertToCapital>:
}

uint8_t ConvertToCapital(uint8_t data)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	71fb      	strb	r3, [r7, #7]
	if(data >= 'a' && data <= 'z')
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b60      	cmp	r3, #96	; 0x60
 80005f8:	d905      	bls.n	8000606 <ConvertToCapital+0x1c>
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b7a      	cmp	r3, #122	; 0x7a
 80005fe:	d802      	bhi.n	8000606 <ConvertToCapital+0x1c>
	{
		data -= ('a' - 'A');
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3b20      	subs	r3, #32
 8000604:	71fb      	strb	r3, [r7, #7]
	}

	return data;
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// LOW LEVEL PROCESSOR SPECIFIC INITS

	// 1. Set up the priority grouping of the ARM Cortex MX Processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f9e7 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the ARM Cortex MX Processor
	SCB->SHCSR |= 0x7 << 16;	// Usage Fault, Memory Fault and Bus Fault System Exception
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_MspInit+0x40>)
 8000620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <HAL_MspInit+0x40>)
 8000624:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000628:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f06f 000b 	mvn.w	r0, #11
 8000632:	f000 f9e6 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	f06f 000a 	mvn.w	r0, #10
 800063e:	f000 f9e0 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	f06f 0009 	mvn.w	r0, #9
 800064a:	f000 f9da 	bl	8000a02 <HAL_NVIC_SetPriority>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	// LOW LEVEL INITS OF THE USART2 PERIPHERAL

	GPIO_InitTypeDef gpioUsart2;

	// 1. Enable the clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <HAL_UART_MspInit+0x88>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <HAL_UART_MspInit+0x88>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_UART_MspInit+0x88>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0x88>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <HAL_UART_MspInit+0x88>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	6313      	str	r3, [r2, #48]	; 0x30
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_MspInit+0x88>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]

	// 2. Pin muxing configurations
	// PA2 - USART2_TX
	// PA3 - USART2_RX
	gpioUsart2.Pin = GPIO_PIN_2;
 8000698:	2304      	movs	r3, #4
 800069a:	617b      	str	r3, [r7, #20]
	gpioUsart2.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
	gpioUsart2.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
	gpioUsart2.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
	gpioUsart2.Alternate = GPIO_AF7_USART2;
 80006a8:	2307      	movs	r3, #7
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpioUsart2);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <HAL_UART_MspInit+0x8c>)
 80006b4:	f000 f9e8 	bl	8000a88 <HAL_GPIO_Init>

	gpioUsart2.Pin = GPIO_PIN_3;
 80006b8:	2308      	movs	r3, #8
 80006ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpioUsart2);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <HAL_UART_MspInit+0x8c>)
 80006c4:	f000 f9e0 	bl	8000a88 <HAL_GPIO_Init>

	// 3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c8:	2026      	movs	r0, #38	; 0x26
 80006ca:	f000 f9b6 	bl	8000a3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210f      	movs	r1, #15
 80006d2:	2026      	movs	r0, #38	; 0x26
 80006d4:	f000 f995 	bl	8000a02 <HAL_NVIC_SetPriority>
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000

080006e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <SystemInit+0x28>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <SystemInit+0x28>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <SystemInit+0x28>)
 80006fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000702:	609a      	str	r2, [r3, #8]
#endif
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800071a:	e003      	b.n	8000724 <LoopCopyDataInit>

0800071c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800071e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000722:	3104      	adds	r1, #4

08000724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800072c:	d3f6      	bcc.n	800071c <CopyDataInit>
  ldr  r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000730:	e002      	b.n	8000738 <LoopFillZerobss>

08000732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000734:	f842 3b04 	str.w	r3, [r2], #4

08000738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800073c:	d3f9      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800073e:	f7ff ffd3 	bl	80006e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f001 f8c1 	bl	80018c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f7ff fecf 	bl	80004e8 <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800074c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000750:	08001960 	.word	0x08001960
  ldr  r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000758:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800075c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000760:	20000070 	.word	0x20000070

08000764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <HAL_Init+0x40>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_Init+0x40>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x40>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x40>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f92b 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff ff3a 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023c00 	.word	0x40023c00

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f943 	bl	8000a56 <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f90b 	bl	8000a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000004 	.word	0x20000004
 8000804:	2000000c 	.word	0x2000000c
 8000808:	20000008 	.word	0x20000008

0800080c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	2000000c 	.word	0x2000000c
 8000830:	2000006c 	.word	0x2000006c

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	2000006c 	.word	0x2000006c

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db0b      	blt.n	80008da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	4907      	ldr	r1, [pc, #28]	; (80008e8 <__NVIC_EnableIRQ+0x38>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	2001      	movs	r0, #1
 80008d2:	fa00 f202 	lsl.w	r2, r0, r2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b8:	d301      	bcc.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00f      	b.n	80009de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <SysTick_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	210f      	movs	r1, #15
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f7ff ff8e 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SysTick_Config+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SysTick_Config+0x40>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff29 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff3e 	bl	8000894 <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff8e 	bl	8000940 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5d 	bl	80008ec <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff31 	bl	80008b0 <__NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffa2 	bl	80009a8 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a72:	f000 f802 	bl	8000a7a <HAL_SYSTICK_Callback>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e16b      	b.n	8000d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 815a 	bne.w	8000d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_GPIO_Init+0x5a>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d007      	beq.n	8000ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad6:	2b11      	cmp	r3, #17
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d130      	bne.n	8000b44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	f003 0201 	and.w	r2, r3, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0xfc>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b12      	cmp	r3, #18
 8000b82:	d123      	bne.n	8000bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	69b9      	ldr	r1, [r7, #24]
 8000bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0203 	and.w	r2, r3, #3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80b4 	beq.w	8000d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b5f      	ldr	r3, [pc, #380]	; (8000d90 <HAL_GPIO_Init+0x308>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a5e      	ldr	r2, [pc, #376]	; (8000d90 <HAL_GPIO_Init+0x308>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_GPIO_Init+0x308>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2a:	4a5a      	ldr	r2, [pc, #360]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a51      	ldr	r2, [pc, #324]	; (8000d98 <HAL_GPIO_Init+0x310>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d02b      	beq.n	8000cae <HAL_GPIO_Init+0x226>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a50      	ldr	r2, [pc, #320]	; (8000d9c <HAL_GPIO_Init+0x314>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d025      	beq.n	8000caa <HAL_GPIO_Init+0x222>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a4f      	ldr	r2, [pc, #316]	; (8000da0 <HAL_GPIO_Init+0x318>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d01f      	beq.n	8000ca6 <HAL_GPIO_Init+0x21e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4e      	ldr	r2, [pc, #312]	; (8000da4 <HAL_GPIO_Init+0x31c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_GPIO_Init+0x21a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <HAL_GPIO_Init+0x320>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x216>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4c      	ldr	r2, [pc, #304]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x212>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	; (8000db0 <HAL_GPIO_Init+0x328>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x20e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <HAL_GPIO_Init+0x32c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x20a>
 8000c8e:	2307      	movs	r3, #7
 8000c90:	e00e      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c92:	2308      	movs	r3, #8
 8000c94:	e00c      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c96:	2306      	movs	r3, #6
 8000c98:	e00a      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	e008      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e004      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	f002 0203 	and.w	r2, r2, #3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4093      	lsls	r3, r2
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc0:	4934      	ldr	r1, [pc, #208]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cf2:	4a31      	ldr	r2, [pc, #196]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	2b0f      	cmp	r3, #15
 8000d80:	f67f ae90 	bls.w	8000aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d84:	bf00      	nop
 8000d86:	3724      	adds	r7, #36	; 0x24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40013800 	.word	0x40013800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020c00 	.word	0x40020c00
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40021400 	.word	0x40021400
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40021c00 	.word	0x40021c00
 8000db8:	40013c00 	.word	0x40013c00

08000dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dd8:	f7ff fff0 	bl	8000dbc <HAL_RCC_GetHCLKFreq>
 8000ddc:	4601      	mov	r1, r0
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	0a9b      	lsrs	r3, r3, #10
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	08001948 	.word	0x08001948

08000dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e00:	f7ff ffdc 	bl	8000dbc <HAL_RCC_GetHCLKFreq>
 8000e04:	4601      	mov	r1, r0
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	0b5b      	lsrs	r3, r3, #13
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	08001948 	.word	0x08001948

08000e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e03f      	b.n	8000eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fc04 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2224      	movs	r2, #36	; 0x24
 8000e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f9b1 	bl	80011d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	695a      	ldr	r2, [r3, #20]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2220      	movs	r2, #32
 8000eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b088      	sub	sp, #32
 8000ec2:	af02      	add	r7, sp, #8
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	f040 8083 	bne.w	8000fe6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <HAL_UART_Transmit+0x2e>
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e07b      	b.n	8000fe8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_UART_Transmit+0x40>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e074      	b.n	8000fe8 <HAL_UART_Transmit+0x12a>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2221      	movs	r2, #33	; 0x21
 8000f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000f14:	f7ff fc8e 	bl	8000834 <HAL_GetTick>
 8000f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000f2e:	e042      	b.n	8000fb6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f46:	d122      	bne.n	8000f8e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f8f2 	bl	800113c <UART_WaitOnFlagUntilTimeout>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e042      	b.n	8000fe8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3302      	adds	r3, #2
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	e017      	b.n	8000fb6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	e013      	b.n	8000fb6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f8cf 	bl	800113c <UART_WaitOnFlagUntilTimeout>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e01f      	b.n	8000fe8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1b7      	bne.n	8000f30 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f8b6 	bl	800113c <UART_WaitOnFlagUntilTimeout>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e006      	b.n	8000fe8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000fe6:	2302      	movs	r3, #2
  }
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b20      	cmp	r3, #32
 800100e:	f040 8090 	bne.w	8001132 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_UART_Receive+0x2e>
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e088      	b.n	8001134 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_UART_Receive+0x40>
 800102c:	2302      	movs	r3, #2
 800102e:	e081      	b.n	8001134 <HAL_UART_Receive+0x144>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2222      	movs	r2, #34	; 0x22
 8001042:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001046:	f7ff fbf5 	bl	8000834 <HAL_GetTick>
 800104a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	88fa      	ldrh	r2, [r7, #6]
 8001056:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001060:	e05c      	b.n	800111c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001066:	b29b      	uxth	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001078:	d12b      	bne.n	80010d2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2200      	movs	r2, #0
 8001082:	2120      	movs	r1, #32
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f859 	bl	800113c <UART_WaitOnFlagUntilTimeout>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e04f      	b.n	8001134 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10c      	bne.n	80010ba <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3302      	adds	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e030      	b.n	800111c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	e024      	b.n	800111c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2200      	movs	r2, #0
 80010da:	2120      	movs	r1, #32
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f82d 	bl	800113c <UART_WaitOnFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e023      	b.n	8001134 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d108      	bne.n	8001106 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6859      	ldr	r1, [r3, #4]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	60ba      	str	r2, [r7, #8]
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00a      	b.n	800111c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1c59      	adds	r1, r3, #1
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001120:	b29b      	uxth	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d19d      	bne.n	8001062 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2220      	movs	r2, #32
 800112a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001132:	2302      	movs	r3, #2
  }
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800114c:	e02c      	b.n	80011a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d028      	beq.n	80011a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <UART_WaitOnFlagUntilTimeout+0x30>
 800115c:	f7ff fb6a 	bl	8000834 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	429a      	cmp	r2, r3
 800116a:	d21d      	bcs.n	80011a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800117a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2220      	movs	r2, #32
 8001190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2220      	movs	r2, #32
 8001198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e00f      	b.n	80011c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	4013      	ands	r3, r2
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d0c3      	beq.n	800114e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4313      	orrs	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001212:	f023 030c 	bic.w	r3, r3, #12
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	430b      	orrs	r3, r1
 800121e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800123e:	f040 818b 	bne.w	8001558 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4ac1      	ldr	r2, [pc, #772]	; (800154c <UART_SetConfig+0x37c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d005      	beq.n	8001258 <UART_SetConfig+0x88>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4abf      	ldr	r2, [pc, #764]	; (8001550 <UART_SetConfig+0x380>)
 8001252:	4293      	cmp	r3, r2
 8001254:	f040 80bd 	bne.w	80013d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001258:	f7ff fdd0 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 800125c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	461d      	mov	r5, r3
 8001262:	f04f 0600 	mov.w	r6, #0
 8001266:	46a8      	mov	r8, r5
 8001268:	46b1      	mov	r9, r6
 800126a:	eb18 0308 	adds.w	r3, r8, r8
 800126e:	eb49 0409 	adc.w	r4, r9, r9
 8001272:	4698      	mov	r8, r3
 8001274:	46a1      	mov	r9, r4
 8001276:	eb18 0805 	adds.w	r8, r8, r5
 800127a:	eb49 0906 	adc.w	r9, r9, r6
 800127e:	f04f 0100 	mov.w	r1, #0
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800128a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800128e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001292:	4688      	mov	r8, r1
 8001294:	4691      	mov	r9, r2
 8001296:	eb18 0005 	adds.w	r0, r8, r5
 800129a:	eb49 0106 	adc.w	r1, r9, r6
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	461d      	mov	r5, r3
 80012a4:	f04f 0600 	mov.w	r6, #0
 80012a8:	196b      	adds	r3, r5, r5
 80012aa:	eb46 0406 	adc.w	r4, r6, r6
 80012ae:	461a      	mov	r2, r3
 80012b0:	4623      	mov	r3, r4
 80012b2:	f7fe ff91 	bl	80001d8 <__aeabi_uldivmod>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	461a      	mov	r2, r3
 80012bc:	4ba5      	ldr	r3, [pc, #660]	; (8001554 <UART_SetConfig+0x384>)
 80012be:	fba3 2302 	umull	r2, r3, r3, r2
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	461d      	mov	r5, r3
 80012cc:	f04f 0600 	mov.w	r6, #0
 80012d0:	46a9      	mov	r9, r5
 80012d2:	46b2      	mov	sl, r6
 80012d4:	eb19 0309 	adds.w	r3, r9, r9
 80012d8:	eb4a 040a 	adc.w	r4, sl, sl
 80012dc:	4699      	mov	r9, r3
 80012de:	46a2      	mov	sl, r4
 80012e0:	eb19 0905 	adds.w	r9, r9, r5
 80012e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80012e8:	f04f 0100 	mov.w	r1, #0
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80012f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80012fc:	4689      	mov	r9, r1
 80012fe:	4692      	mov	sl, r2
 8001300:	eb19 0005 	adds.w	r0, r9, r5
 8001304:	eb4a 0106 	adc.w	r1, sl, r6
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	461d      	mov	r5, r3
 800130e:	f04f 0600 	mov.w	r6, #0
 8001312:	196b      	adds	r3, r5, r5
 8001314:	eb46 0406 	adc.w	r4, r6, r6
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	f7fe ff5c 	bl	80001d8 <__aeabi_uldivmod>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	461a      	mov	r2, r3
 8001326:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <UART_SetConfig+0x384>)
 8001328:	fba3 1302 	umull	r1, r3, r3, r2
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	2164      	movs	r1, #100	; 0x64
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	3332      	adds	r3, #50	; 0x32
 800133a:	4a86      	ldr	r2, [pc, #536]	; (8001554 <UART_SetConfig+0x384>)
 800133c:	fba2 2303 	umull	r2, r3, r2, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001348:	4498      	add	r8, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	461d      	mov	r5, r3
 800134e:	f04f 0600 	mov.w	r6, #0
 8001352:	46a9      	mov	r9, r5
 8001354:	46b2      	mov	sl, r6
 8001356:	eb19 0309 	adds.w	r3, r9, r9
 800135a:	eb4a 040a 	adc.w	r4, sl, sl
 800135e:	4699      	mov	r9, r3
 8001360:	46a2      	mov	sl, r4
 8001362:	eb19 0905 	adds.w	r9, r9, r5
 8001366:	eb4a 0a06 	adc.w	sl, sl, r6
 800136a:	f04f 0100 	mov.w	r1, #0
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800137a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800137e:	4689      	mov	r9, r1
 8001380:	4692      	mov	sl, r2
 8001382:	eb19 0005 	adds.w	r0, r9, r5
 8001386:	eb4a 0106 	adc.w	r1, sl, r6
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	461d      	mov	r5, r3
 8001390:	f04f 0600 	mov.w	r6, #0
 8001394:	196b      	adds	r3, r5, r5
 8001396:	eb46 0406 	adc.w	r4, r6, r6
 800139a:	461a      	mov	r2, r3
 800139c:	4623      	mov	r3, r4
 800139e:	f7fe ff1b 	bl	80001d8 <__aeabi_uldivmod>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b6a      	ldr	r3, [pc, #424]	; (8001554 <UART_SetConfig+0x384>)
 80013aa:	fba3 1302 	umull	r1, r3, r3, r2
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2164      	movs	r1, #100	; 0x64
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	3332      	adds	r3, #50	; 0x32
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <UART_SetConfig+0x384>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	f003 0207 	and.w	r2, r3, #7
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4442      	add	r2, r8
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e26f      	b.n	80018b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80013d2:	f7ff fcff 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 80013d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	461d      	mov	r5, r3
 80013dc:	f04f 0600 	mov.w	r6, #0
 80013e0:	46a8      	mov	r8, r5
 80013e2:	46b1      	mov	r9, r6
 80013e4:	eb18 0308 	adds.w	r3, r8, r8
 80013e8:	eb49 0409 	adc.w	r4, r9, r9
 80013ec:	4698      	mov	r8, r3
 80013ee:	46a1      	mov	r9, r4
 80013f0:	eb18 0805 	adds.w	r8, r8, r5
 80013f4:	eb49 0906 	adc.w	r9, r9, r6
 80013f8:	f04f 0100 	mov.w	r1, #0
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001404:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001408:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800140c:	4688      	mov	r8, r1
 800140e:	4691      	mov	r9, r2
 8001410:	eb18 0005 	adds.w	r0, r8, r5
 8001414:	eb49 0106 	adc.w	r1, r9, r6
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	461d      	mov	r5, r3
 800141e:	f04f 0600 	mov.w	r6, #0
 8001422:	196b      	adds	r3, r5, r5
 8001424:	eb46 0406 	adc.w	r4, r6, r6
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	f7fe fed4 	bl	80001d8 <__aeabi_uldivmod>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	461a      	mov	r2, r3
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <UART_SetConfig+0x384>)
 8001438:	fba3 2302 	umull	r2, r3, r3, r2
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	461d      	mov	r5, r3
 8001446:	f04f 0600 	mov.w	r6, #0
 800144a:	46a9      	mov	r9, r5
 800144c:	46b2      	mov	sl, r6
 800144e:	eb19 0309 	adds.w	r3, r9, r9
 8001452:	eb4a 040a 	adc.w	r4, sl, sl
 8001456:	4699      	mov	r9, r3
 8001458:	46a2      	mov	sl, r4
 800145a:	eb19 0905 	adds.w	r9, r9, r5
 800145e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001462:	f04f 0100 	mov.w	r1, #0
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800146e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001476:	4689      	mov	r9, r1
 8001478:	4692      	mov	sl, r2
 800147a:	eb19 0005 	adds.w	r0, r9, r5
 800147e:	eb4a 0106 	adc.w	r1, sl, r6
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	461d      	mov	r5, r3
 8001488:	f04f 0600 	mov.w	r6, #0
 800148c:	196b      	adds	r3, r5, r5
 800148e:	eb46 0406 	adc.w	r4, r6, r6
 8001492:	461a      	mov	r2, r3
 8001494:	4623      	mov	r3, r4
 8001496:	f7fe fe9f 	bl	80001d8 <__aeabi_uldivmod>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	461a      	mov	r2, r3
 80014a0:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <UART_SetConfig+0x384>)
 80014a2:	fba3 1302 	umull	r1, r3, r3, r2
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2164      	movs	r1, #100	; 0x64
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	3332      	adds	r3, #50	; 0x32
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <UART_SetConfig+0x384>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80014c2:	4498      	add	r8, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	461d      	mov	r5, r3
 80014c8:	f04f 0600 	mov.w	r6, #0
 80014cc:	46a9      	mov	r9, r5
 80014ce:	46b2      	mov	sl, r6
 80014d0:	eb19 0309 	adds.w	r3, r9, r9
 80014d4:	eb4a 040a 	adc.w	r4, sl, sl
 80014d8:	4699      	mov	r9, r3
 80014da:	46a2      	mov	sl, r4
 80014dc:	eb19 0905 	adds.w	r9, r9, r5
 80014e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80014f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80014f8:	4689      	mov	r9, r1
 80014fa:	4692      	mov	sl, r2
 80014fc:	eb19 0005 	adds.w	r0, r9, r5
 8001500:	eb4a 0106 	adc.w	r1, sl, r6
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	461d      	mov	r5, r3
 800150a:	f04f 0600 	mov.w	r6, #0
 800150e:	196b      	adds	r3, r5, r5
 8001510:	eb46 0406 	adc.w	r4, r6, r6
 8001514:	461a      	mov	r2, r3
 8001516:	4623      	mov	r3, r4
 8001518:	f7fe fe5e 	bl	80001d8 <__aeabi_uldivmod>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	461a      	mov	r2, r3
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <UART_SetConfig+0x384>)
 8001524:	fba3 1302 	umull	r1, r3, r3, r2
 8001528:	095b      	lsrs	r3, r3, #5
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	3332      	adds	r3, #50	; 0x32
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <UART_SetConfig+0x384>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	f003 0207 	and.w	r2, r3, #7
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4442      	add	r2, r8
 8001548:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800154a:	e1b2      	b.n	80018b2 <UART_SetConfig+0x6e2>
 800154c:	40011000 	.word	0x40011000
 8001550:	40011400 	.word	0x40011400
 8001554:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4ad7      	ldr	r2, [pc, #860]	; (80018bc <UART_SetConfig+0x6ec>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d005      	beq.n	800156e <UART_SetConfig+0x39e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4ad6      	ldr	r2, [pc, #856]	; (80018c0 <UART_SetConfig+0x6f0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f040 80d1 	bne.w	8001710 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800156e:	f7ff fc45 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8001572:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	469a      	mov	sl, r3
 8001578:	f04f 0b00 	mov.w	fp, #0
 800157c:	46d0      	mov	r8, sl
 800157e:	46d9      	mov	r9, fp
 8001580:	eb18 0308 	adds.w	r3, r8, r8
 8001584:	eb49 0409 	adc.w	r4, r9, r9
 8001588:	4698      	mov	r8, r3
 800158a:	46a1      	mov	r9, r4
 800158c:	eb18 080a 	adds.w	r8, r8, sl
 8001590:	eb49 090b 	adc.w	r9, r9, fp
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80015a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80015a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80015a8:	4688      	mov	r8, r1
 80015aa:	4691      	mov	r9, r2
 80015ac:	eb1a 0508 	adds.w	r5, sl, r8
 80015b0:	eb4b 0609 	adc.w	r6, fp, r9
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	f04f 0400 	mov.w	r4, #0
 80015c6:	0094      	lsls	r4, r2, #2
 80015c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80015cc:	008b      	lsls	r3, r1, #2
 80015ce:	461a      	mov	r2, r3
 80015d0:	4623      	mov	r3, r4
 80015d2:	4628      	mov	r0, r5
 80015d4:	4631      	mov	r1, r6
 80015d6:	f7fe fdff 	bl	80001d8 <__aeabi_uldivmod>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	461a      	mov	r2, r3
 80015e0:	4bb8      	ldr	r3, [pc, #736]	; (80018c4 <UART_SetConfig+0x6f4>)
 80015e2:	fba3 2302 	umull	r2, r3, r3, r2
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	469b      	mov	fp, r3
 80015f0:	f04f 0c00 	mov.w	ip, #0
 80015f4:	46d9      	mov	r9, fp
 80015f6:	46e2      	mov	sl, ip
 80015f8:	eb19 0309 	adds.w	r3, r9, r9
 80015fc:	eb4a 040a 	adc.w	r4, sl, sl
 8001600:	4699      	mov	r9, r3
 8001602:	46a2      	mov	sl, r4
 8001604:	eb19 090b 	adds.w	r9, r9, fp
 8001608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800161c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001620:	4689      	mov	r9, r1
 8001622:	4692      	mov	sl, r2
 8001624:	eb1b 0509 	adds.w	r5, fp, r9
 8001628:	eb4c 060a 	adc.w	r6, ip, sl
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	f04f 0400 	mov.w	r4, #0
 800163e:	0094      	lsls	r4, r2, #2
 8001640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001644:	008b      	lsls	r3, r1, #2
 8001646:	461a      	mov	r2, r3
 8001648:	4623      	mov	r3, r4
 800164a:	4628      	mov	r0, r5
 800164c:	4631      	mov	r1, r6
 800164e:	f7fe fdc3 	bl	80001d8 <__aeabi_uldivmod>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	461a      	mov	r2, r3
 8001658:	4b9a      	ldr	r3, [pc, #616]	; (80018c4 <UART_SetConfig+0x6f4>)
 800165a:	fba3 1302 	umull	r1, r3, r3, r2
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2164      	movs	r1, #100	; 0x64
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	3332      	adds	r3, #50	; 0x32
 800166c:	4a95      	ldr	r2, [pc, #596]	; (80018c4 <UART_SetConfig+0x6f4>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001678:	4498      	add	r8, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	469b      	mov	fp, r3
 800167e:	f04f 0c00 	mov.w	ip, #0
 8001682:	46d9      	mov	r9, fp
 8001684:	46e2      	mov	sl, ip
 8001686:	eb19 0309 	adds.w	r3, r9, r9
 800168a:	eb4a 040a 	adc.w	r4, sl, sl
 800168e:	4699      	mov	r9, r3
 8001690:	46a2      	mov	sl, r4
 8001692:	eb19 090b 	adds.w	r9, r9, fp
 8001696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80016aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80016ae:	4689      	mov	r9, r1
 80016b0:	4692      	mov	sl, r2
 80016b2:	eb1b 0509 	adds.w	r5, fp, r9
 80016b6:	eb4c 060a 	adc.w	r6, ip, sl
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	f04f 0400 	mov.w	r4, #0
 80016cc:	0094      	lsls	r4, r2, #2
 80016ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80016d2:	008b      	lsls	r3, r1, #2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	4631      	mov	r1, r6
 80016dc:	f7fe fd7c 	bl	80001d8 <__aeabi_uldivmod>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b77      	ldr	r3, [pc, #476]	; (80018c4 <UART_SetConfig+0x6f4>)
 80016e8:	fba3 1302 	umull	r1, r3, r3, r2
 80016ec:	095b      	lsrs	r3, r3, #5
 80016ee:	2164      	movs	r1, #100	; 0x64
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	3332      	adds	r3, #50	; 0x32
 80016fa:	4a72      	ldr	r2, [pc, #456]	; (80018c4 <UART_SetConfig+0x6f4>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	f003 020f 	and.w	r2, r3, #15
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4442      	add	r2, r8
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	e0d0      	b.n	80018b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001710:	f7ff fb60 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 8001714:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	469a      	mov	sl, r3
 800171a:	f04f 0b00 	mov.w	fp, #0
 800171e:	46d0      	mov	r8, sl
 8001720:	46d9      	mov	r9, fp
 8001722:	eb18 0308 	adds.w	r3, r8, r8
 8001726:	eb49 0409 	adc.w	r4, r9, r9
 800172a:	4698      	mov	r8, r3
 800172c:	46a1      	mov	r9, r4
 800172e:	eb18 080a 	adds.w	r8, r8, sl
 8001732:	eb49 090b 	adc.w	r9, r9, fp
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001742:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800174a:	4688      	mov	r8, r1
 800174c:	4691      	mov	r9, r2
 800174e:	eb1a 0508 	adds.w	r5, sl, r8
 8001752:	eb4b 0609 	adc.w	r6, fp, r9
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f04f 0400 	mov.w	r4, #0
 8001768:	0094      	lsls	r4, r2, #2
 800176a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800176e:	008b      	lsls	r3, r1, #2
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	4628      	mov	r0, r5
 8001776:	4631      	mov	r1, r6
 8001778:	f7fe fd2e 	bl	80001d8 <__aeabi_uldivmod>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	461a      	mov	r2, r3
 8001782:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <UART_SetConfig+0x6f4>)
 8001784:	fba3 2302 	umull	r2, r3, r3, r2
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	469b      	mov	fp, r3
 8001792:	f04f 0c00 	mov.w	ip, #0
 8001796:	46d9      	mov	r9, fp
 8001798:	46e2      	mov	sl, ip
 800179a:	eb19 0309 	adds.w	r3, r9, r9
 800179e:	eb4a 040a 	adc.w	r4, sl, sl
 80017a2:	4699      	mov	r9, r3
 80017a4:	46a2      	mov	sl, r4
 80017a6:	eb19 090b 	adds.w	r9, r9, fp
 80017aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80017be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80017c2:	4689      	mov	r9, r1
 80017c4:	4692      	mov	sl, r2
 80017c6:	eb1b 0509 	adds.w	r5, fp, r9
 80017ca:	eb4c 060a 	adc.w	r6, ip, sl
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f04f 0400 	mov.w	r4, #0
 80017e0:	0094      	lsls	r4, r2, #2
 80017e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80017e6:	008b      	lsls	r3, r1, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	4628      	mov	r0, r5
 80017ee:	4631      	mov	r1, r6
 80017f0:	f7fe fcf2 	bl	80001d8 <__aeabi_uldivmod>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <UART_SetConfig+0x6f4>)
 80017fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	2164      	movs	r1, #100	; 0x64
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	3332      	adds	r3, #50	; 0x32
 800180e:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <UART_SetConfig+0x6f4>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	095b      	lsrs	r3, r3, #5
 8001816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181a:	4498      	add	r8, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	469b      	mov	fp, r3
 8001820:	f04f 0c00 	mov.w	ip, #0
 8001824:	46d9      	mov	r9, fp
 8001826:	46e2      	mov	sl, ip
 8001828:	eb19 0309 	adds.w	r3, r9, r9
 800182c:	eb4a 040a 	adc.w	r4, sl, sl
 8001830:	4699      	mov	r9, r3
 8001832:	46a2      	mov	sl, r4
 8001834:	eb19 090b 	adds.w	r9, r9, fp
 8001838:	eb4a 0a0c 	adc.w	sl, sl, ip
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800184c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001850:	4689      	mov	r9, r1
 8001852:	4692      	mov	sl, r2
 8001854:	eb1b 0509 	adds.w	r5, fp, r9
 8001858:	eb4c 060a 	adc.w	r6, ip, sl
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	f04f 0400 	mov.w	r4, #0
 800186e:	0094      	lsls	r4, r2, #2
 8001870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001874:	008b      	lsls	r3, r1, #2
 8001876:	461a      	mov	r2, r3
 8001878:	4623      	mov	r3, r4
 800187a:	4628      	mov	r0, r5
 800187c:	4631      	mov	r1, r6
 800187e:	f7fe fcab 	bl	80001d8 <__aeabi_uldivmod>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	461a      	mov	r2, r3
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <UART_SetConfig+0x6f4>)
 800188a:	fba3 1302 	umull	r1, r3, r3, r2
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2164      	movs	r1, #100	; 0x64
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	3332      	adds	r3, #50	; 0x32
 800189c:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <UART_SetConfig+0x6f4>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	f003 020f 	and.w	r2, r3, #15
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4442      	add	r2, r8
 80018ae:	609a      	str	r2, [r3, #8]
}
 80018b0:	e7ff      	b.n	80018b2 <UART_SetConfig+0x6e2>
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40011400 	.word	0x40011400
 80018c4:	51eb851f 	.word	0x51eb851f

080018c8 <__libc_init_array>:
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	4e0d      	ldr	r6, [pc, #52]	; (8001900 <__libc_init_array+0x38>)
 80018cc:	4c0d      	ldr	r4, [pc, #52]	; (8001904 <__libc_init_array+0x3c>)
 80018ce:	1ba4      	subs	r4, r4, r6
 80018d0:	10a4      	asrs	r4, r4, #2
 80018d2:	2500      	movs	r5, #0
 80018d4:	42a5      	cmp	r5, r4
 80018d6:	d109      	bne.n	80018ec <__libc_init_array+0x24>
 80018d8:	4e0b      	ldr	r6, [pc, #44]	; (8001908 <__libc_init_array+0x40>)
 80018da:	4c0c      	ldr	r4, [pc, #48]	; (800190c <__libc_init_array+0x44>)
 80018dc:	f000 f818 	bl	8001910 <_init>
 80018e0:	1ba4      	subs	r4, r4, r6
 80018e2:	10a4      	asrs	r4, r4, #2
 80018e4:	2500      	movs	r5, #0
 80018e6:	42a5      	cmp	r5, r4
 80018e8:	d105      	bne.n	80018f6 <__libc_init_array+0x2e>
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f0:	4798      	blx	r3
 80018f2:	3501      	adds	r5, #1
 80018f4:	e7ee      	b.n	80018d4 <__libc_init_array+0xc>
 80018f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018fa:	4798      	blx	r3
 80018fc:	3501      	adds	r5, #1
 80018fe:	e7f2      	b.n	80018e6 <__libc_init_array+0x1e>
 8001900:	08001958 	.word	0x08001958
 8001904:	08001958 	.word	0x08001958
 8001908:	08001958 	.word	0x08001958
 800190c:	0800195c 	.word	0x0800195c

08001910 <_init>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr

0800191c <_fini>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr
