
Mcu2_CanNormalMode2Nodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000408c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004328  08004328  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080043a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080043a0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c061  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c1  00000000  00000000  0002c101  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  0002e628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212cd  00000000  00000000  0002f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086ee  00000000  00000000  0005048d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc0c2  00000000  00000000  00058b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124c3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  00124cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004204 	.word	0x08004204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004204 	.word	0x08004204

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SysTick_Handler>:

extern CAN_HandleTypeDef can1Handle;
extern TIM_HandleTypeDef tim6Handle;

void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000584:	f000 fd5e 	bl	8001044 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000588:	f001 fcde 	bl	8001f48 <HAL_SYSTICK_IRQHandler>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1Handle);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <CAN1_TX_IRQHandler+0x10>)
 8000596:	f001 f9a8 	bl	80018ea <HAL_CAN_IRQHandler>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000138 	.word	0x20000138

080005a4 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1Handle);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <CAN1_RX0_IRQHandler+0x10>)
 80005aa:	f001 f99e 	bl	80018ea <HAL_CAN_IRQHandler>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000138 	.word	0x20000138

080005b8 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1Handle);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <CAN1_RX1_IRQHandler+0x10>)
 80005be:	f001 f994 	bl	80018ea <HAL_CAN_IRQHandler>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000138 	.word	0x20000138

080005cc <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1Handle);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <CAN1_SCE_IRQHandler+0x10>)
 80005d2:	f001 f98a 	bl	80018ea <HAL_CAN_IRQHandler>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000138 	.word	0x20000138

080005e0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&tim6Handle);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <TIM6_DAC_IRQHandler+0x10>)
 80005e6:	f002 fb44 	bl	8002c72 <HAL_TIM_IRQHandler>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000f8 	.word	0x200000f8

080005f4 <EXTI15_10_IRQHandler>:

// Change EXTI number for Discovery Board
void EXTI15_10_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&tim6Handle);
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <EXTI15_10_IRQHandler+0x18>)
 80005fa:	f002 fb16 	bl	8002c2a <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000602:	f001 fe7d 	bl	8002300 <HAL_GPIO_EXTI_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000f8 	.word	0x200000f8

08000610 <main>:
uint8_t ledNumber = 0;
CAN_RxHeaderTypeDef rxHeader;
uint8_t reqCounter = 0;

int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_Init();
 8000614:	f000 fcc4 	bl	8000fa0 <HAL_Init>
	SystemClockConfig(SYS_CLOCK_FREQ_84_MHZ);
 8000618:	2054      	movs	r0, #84	; 0x54
 800061a:	f000 f821 	bl	8000660 <SystemClockConfig>
	GPIO_Init();
 800061e:	f000 f97d 	bl	800091c <GPIO_Init>
	Usart2_Init();
 8000622:	f000 f8a3 	bl	800076c <Usart2_Init>
	TIM6_Init();
 8000626:	f000 f95d 	bl	80008e4 <TIM6_Init>

	CAN1_Init();
 800062a:	f000 f8c9 	bl	80007c0 <CAN1_Init>
	CAN1_FilterConfig();
 800062e:	f000 f8fd 	bl	800082c <CAN1_FilterConfig>
    if(HAL_CAN_ActivateNotification(&can1Handle, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 8000632:	f240 4103 	movw	r1, #1027	; 0x403
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0x4c>)
 8000638:	f001 f931 	bl	800189e <HAL_CAN_ActivateNotification>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0x36>
    {
    	ErrorHandler();
 8000642:	f000 f8b9 	bl	80007b8 <ErrorHandler>
    }

    if(HAL_CAN_Start(&can1Handle) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x4c>)
 8000648:	f000 fef8 	bl	800143c <HAL_CAN_Start>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <main+0x46>
	{
		ErrorHandler();
 8000652:	f000 f8b1 	bl	80007b8 <ErrorHandler>
	}
	CAN1_Tx();
 8000656:	f000 f90f 	bl	8000878 <CAN1_Tx>

	while(1);
 800065a:	e7fe      	b.n	800065a <main+0x4a>
 800065c:	20000138 	.word	0x20000138

08000660 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(uint8_t clockFreq)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint32_t fLatency = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
	oscInit.HSIState = RCC_HSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
	oscInit.HSICalibrationValue = 16;
 8000676:	2310      	movs	r3, #16
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2300      	movs	r3, #0
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b54      	cmp	r3, #84	; 0x54
 8000686:	d01b      	beq.n	80006c0 <SystemClockConfig+0x60>
 8000688:	2b78      	cmp	r3, #120	; 0x78
 800068a:	d030      	beq.n	80006ee <SystemClockConfig+0x8e>
 800068c:	2b32      	cmp	r3, #50	; 0x32
 800068e:	d000      	beq.n	8000692 <SystemClockConfig+0x32>
			break;
		}

		default:
		{
			break;
 8000690:	e044      	b.n	800071c <SystemClockConfig+0xbc>
			oscInit.PLL.PLLM = 16;
 8000692:	2310      	movs	r3, #16
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
			oscInit.PLL.PLLN = 100;
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
			oscInit.PLL.PLLP = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
			oscInit.PLL.PLLQ = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006a2:	230f      	movs	r3, #15
 80006a4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
			fLatency = FLASH_ACR_LATENCY_1WS;
 80006ba:	2301      	movs	r3, #1
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80006be:	e02d      	b.n	800071c <SystemClockConfig+0xbc>
			oscInit.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
			oscInit.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
			oscInit.PLL.PLLP = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
			oscInit.PLL.PLLQ = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]
			fLatency = FLASH_ACR_LATENCY_2WS;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80006ec:	e016      	b.n	800071c <SystemClockConfig+0xbc>
			oscInit.PLL.PLLM = 16;
 80006ee:	2310      	movs	r3, #16
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			oscInit.PLL.PLLN = 240;
 80006f2:	23f0      	movs	r3, #240	; 0xf0
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
			oscInit.PLL.PLLP = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
			oscInit.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61bb      	str	r3, [r7, #24]
			fLatency = FLASH_ACR_LATENCY_3WS;
 8000716:	2303      	movs	r3, #3
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 800071a:	bf00      	nop
		}
	}

	if(HAL_RCC_OscConfig(&oscInit) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fe11 	bl	8002348 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClockConfig+0xd0>
	{
		ErrorHandler();
 800072c:	f000 f844 	bl	80007b8 <ErrorHandler>
	}

	if(HAL_RCC_ClockConfig(&clkInit, fLatency) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f876 	bl	8002828 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClockConfig+0xe6>
	{
		ErrorHandler();
 8000742:	f000 f839 	bl	80007b8 <ErrorHandler>
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000746:	f002 fa07 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 800074a:	4602      	mov	r2, r0
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemClockConfig+0x108>)
 800074e:	fba3 2302 	umull	r2, r3, r3, r2
 8000752:	099b      	lsrs	r3, r3, #6
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fbce 	bl	8001ef6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800075a:	2004      	movs	r0, #4
 800075c:	f001 fbd8 	bl	8001f10 <HAL_SYSTICK_CLKSourceConfig>
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	10624dd3 	.word	0x10624dd3

0800076c <Usart2_Init>:

void Usart2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	usart2Handle.Instance = USART2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <Usart2_Init+0x44>)
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <Usart2_Init+0x48>)
 8000774:	601a      	str	r2, [r3, #0]
	usart2Handle.Init.BaudRate = 9600;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <Usart2_Init+0x44>)
 8000778:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800077c:	605a      	str	r2, [r3, #4]
	usart2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <Usart2_Init+0x44>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	usart2Handle.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <Usart2_Init+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
	usart2Handle.Init.Parity = UART_PARITY_NONE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <Usart2_Init+0x44>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
	usart2Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <Usart2_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
	usart2Handle.Init.Mode = UART_MODE_TX_RX;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <Usart2_Init+0x44>)
 8000798:	220c      	movs	r2, #12
 800079a:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&usart2Handle) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <Usart2_Init+0x44>)
 800079e:	f002 fc4d 	bl	800303c <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <Usart2_Init+0x40>
	{
		ErrorHandler();
 80007a8:	f000 f806 	bl	80007b8 <ErrorHandler>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000b8 	.word	0x200000b8
 80007b4:	40004400 	.word	0x40004400

080007b8 <ErrorHandler>:

void ErrorHandler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	while(1);
 80007bc:	e7fe      	b.n	80007bc <ErrorHandler+0x4>
	...

080007c0 <CAN1_Init>:
}

void CAN1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	can1Handle.Instance = CAN1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <CAN1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <CAN1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
	can1Handle.Init.Mode = CAN_MODE_NORMAL;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <CAN1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
	can1Handle.Init.AutoBusOff = ENABLE;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <CAN1_Init+0x64>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	765a      	strb	r2, [r3, #25]
	can1Handle.Init.AutoRetransmission = ENABLE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <CAN1_Init+0x64>)
 80007d8:	2201      	movs	r2, #1
 80007da:	76da      	strb	r2, [r3, #27]
	can1Handle.Init.AutoWakeUp = DISABLE;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <CAN1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	769a      	strb	r2, [r3, #26]
	can1Handle.Init.ReceiveFifoLocked = DISABLE;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <CAN1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	771a      	strb	r2, [r3, #28]
	can1Handle.Init.TimeTriggeredMode = DISABLE;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
	can1Handle.Init.TransmitFifoPriority = DISABLE;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <CAN1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	775a      	strb	r2, [r3, #29]

	// Settings related to CAN bit timings (500 kbps)
	can1Handle.Init.Prescaler = 3;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <CAN1_Init+0x64>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	605a      	str	r2, [r3, #4]
	can1Handle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <CAN1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
	can1Handle.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <CAN1_Init+0x64>)
 8000802:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000806:	611a      	str	r2, [r3, #16]
	can1Handle.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <CAN1_Init+0x64>)
 800080a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800080e:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&can1Handle) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <CAN1_Init+0x64>)
 8000812:	f000 fc37 	bl	8001084 <HAL_CAN_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <CAN1_Init+0x60>
	{
		ErrorHandler();
 800081c:	f7ff ffcc 	bl	80007b8 <ErrorHandler>
	}
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000138 	.word	0x20000138
 8000828:	40006400 	.word	0x40006400

0800082c <CAN1_FilterConfig>:

void CAN1_FilterConfig(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterInit;

	filterInit.FilterActivation = ENABLE;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
	filterInit.FilterBank = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
	filterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
	filterInit.FilterIdHigh = 0x0000;
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
	filterInit.FilterIdLow = 0x0000;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
	filterInit.FilterMaskIdHigh = 0x01C0;
 8000846:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800084a:	60bb      	str	r3, [r7, #8]
	filterInit.FilterMaskIdLow = 0x0000;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
	filterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
	filterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&can1Handle, &filterInit) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <CAN1_FilterConfig+0x48>)
 800085e:	f000 fd0d 	bl	800127c <HAL_CAN_ConfigFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <CAN1_FilterConfig+0x40>
	{
		ErrorHandler();
 8000868:	f7ff ffa6 	bl	80007b8 <ErrorHandler>
	}
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000138 	.word	0x20000138

08000878 <CAN1_Tx>:

void CAN1_Tx(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	uint8_t message;

	txHeader.DLC = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
	txHeader.StdId = 0x65D;
 8000882:	f240 635d 	movw	r3, #1629	; 0x65d
 8000886:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

	message = ++ledNumber;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <CAN1_Tx+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <CAN1_Tx+0x60>)
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <CAN1_Tx+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	70fb      	strb	r3, [r7, #3]

	if(ledNumber == 4)
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <CAN1_Tx+0x60>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d102      	bne.n	80008b0 <CAN1_Tx+0x38>
	{
		ledNumber = 0;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <CAN1_Tx+0x60>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008b0:	2120      	movs	r1, #32
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <CAN1_Tx+0x64>)
 80008b4:	f001 fd09 	bl	80022ca <HAL_GPIO_TogglePin>

	if(HAL_CAN_AddTxMessage(&can1Handle, &txHeader, &message, &txMailbox) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	1cfa      	adds	r2, r7, #3
 80008bc:	f107 0108 	add.w	r1, r7, #8
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <CAN1_Tx+0x68>)
 80008c2:	f000 fdff 	bl	80014c4 <HAL_CAN_AddTxMessage>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <CAN1_Tx+0x58>
	{
		ErrorHandler();
 80008cc:	f7ff ff74 	bl	80007b8 <ErrorHandler>
	}
}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	40020000 	.word	0x40020000
 80008e0:	20000138 	.word	0x20000138

080008e4 <TIM6_Init>:
	sprintf(msg, "Message received: %s\r\n", receivedMessage);
	HAL_UART_Transmit(&usart2Handle, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

void TIM6_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	tim6Handle.Instance = TIM6;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <TIM6_Init+0x30>)
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <TIM6_Init+0x34>)
 80008ec:	601a      	str	r2, [r3, #0]
	tim6Handle.Init.Prescaler = 4999;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <TIM6_Init+0x30>)
 80008f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80008f4:	605a      	str	r2, [r3, #4]
	tim6Handle.Init.Period = 10000 - 1;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <TIM6_Init+0x30>)
 80008f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80008fc:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&tim6Handle) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <TIM6_Init+0x30>)
 8000900:	f002 f95e 	bl	8002bc0 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <TIM6_Init+0x2a>
	{
		ErrorHandler();
 800090a:	f7ff ff55 	bl	80007b8 <ErrorHandler>
	}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000f8 	.word	0x200000f8
 8000918:	40001000 	.word	0x40001000

0800091c <GPIO_Init>:

void GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <GPIO_Init+0xd0>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a29      	ldr	r2, [pc, #164]	; (80009ec <GPIO_Init+0xd0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <GPIO_Init+0xd0>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledGpio;

	ledGpio.Pin = GPIO_PIN_5;
 8000976:	2320      	movs	r3, #32
 8000978:	60fb      	str	r3, [r7, #12]
	ledGpio.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
	ledGpio.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &ledGpio);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <GPIO_Init+0xd4>)
 800098a:	f001 faeb 	bl	8001f64 <HAL_GPIO_Init>

	ledGpio.Pin = GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_6;
 800098e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000992:	60fb      	str	r3, [r7, #12]
	ledGpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
	ledGpio.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &ledGpio);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <GPIO_Init+0xd8>)
 80009a4:	f001 fade 	bl	8001f64 <HAL_GPIO_Init>

	ledGpio.Pin = GPIO_PIN_8;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	60fb      	str	r3, [r7, #12]
	ledGpio.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
	ledGpio.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &ledGpio);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <GPIO_Init+0xdc>)
 80009be:	f001 fad1 	bl	8001f64 <HAL_GPIO_Init>

	ledGpio.Pin = GPIO_PIN_13;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	60fb      	str	r3, [r7, #12]
	ledGpio.Mode = GPIO_MODE_IT_FALLING;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <GPIO_Init+0xe0>)
 80009ca:	613b      	str	r3, [r7, #16]
	ledGpio.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &ledGpio);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <GPIO_Init+0xd8>)
 80009d8:	f001 fac4 	bl	8001f64 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f001 fa7c 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020400 	.word	0x40020400
 80009fc:	10210000 	.word	0x10210000

08000a00 <LED_ManageOutput>:

void LED_ManageOutput(uint8_t ledNumber)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	switch(ledNumber)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d866      	bhi.n	8000ae0 <LED_ManageOutput+0xe0>
 8000a12:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <LED_ManageOutput+0x18>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a29 	.word	0x08000a29
 8000a1c:	08000a57 	.word	0x08000a57
 8000a20:	08000a85 	.word	0x08000a85
 8000a24:	08000ab3 	.word	0x08000ab3
	{
		case 1:
		{
			HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a30:	f001 fc32 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	482b      	ldr	r0, [pc, #172]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a3c:	f001 fc2c 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4829      	ldr	r0, [pc, #164]	; (8000aec <LED_ManageOutput+0xec>)
 8000a48:	f001 fc26 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a52:	f001 fc21 	bl	8002298 <HAL_GPIO_WritePin>
		}
		case 2:
		{
			HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a5e:	f001 fc1b 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a6a:	f001 fc15 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <LED_ManageOutput+0xec>)
 8000a76:	f001 fc0f 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a80:	f001 fc0a 	bl	8002298 <HAL_GPIO_WritePin>
		}
		case 3:
		{
			HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a8c:	f001 fc04 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000a98:	f001 fbfe 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <LED_ManageOutput+0xec>)
 8000aa4:	f001 fbf8 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000aae:	f001 fbf3 	bl	8002298 <HAL_GPIO_WritePin>
		}
		case 4:
		{
			HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000aba:	f001 fbed 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000ac6:	f001 fbe7 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <LED_ManageOutput+0xec>)
 8000ad2:	f001 fbe1 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <LED_ManageOutput+0xe8>)
 8000adc:	f001 fbdc 	bl	8002298 <HAL_GPIO_WritePin>
		}
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020400 	.word	0x40020400

08000af0 <SendResponse>:

void SendResponse(uint32_t stdId)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	uint8_t response[2] = {0xAB, 0xCD};
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <SendResponse+0x44>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	813b      	strh	r3, [r7, #8]

	txHeader.DLC = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
	txHeader.StdId = stdId;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_STD;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&can1Handle, &txHeader, response, &txMailbox) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	f107 0110 	add.w	r1, r7, #16
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <SendResponse+0x48>)
 8000b1c:	f000 fcd2 	bl	80014c4 <HAL_CAN_AddTxMessage>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SendResponse+0x3a>
	{
		ErrorHandler();
 8000b26:	f7ff fe47 	bl	80007b8 <ErrorHandler>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08004234 	.word	0x08004234
 8000b38:	20000138 	.word	0x20000138

08000b3c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b090      	sub	sp, #64	; 0x40
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg, "Message transmitted - M0\r\n");
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 8000b4a:	461c      	mov	r4, r3
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	c403      	stmia	r4!, {r0, r1}
 8000b58:	8022      	strh	r2, [r4, #0]
 8000b5a:	3402      	adds	r4, #2
 8000b5c:	0c13      	lsrs	r3, r2, #16
 8000b5e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&usart2Handle, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb33 	bl	80001d0 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	f107 010c 	add.w	r1, r7, #12
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 8000b78:	f002 faad 	bl	80030d6 <HAL_UART_Transmit>
}
 8000b7c:	bf00      	nop
 8000b7e:	3740      	adds	r7, #64	; 0x40
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bdb0      	pop	{r4, r5, r7, pc}
 8000b84:	08004238 	.word	0x08004238
 8000b88:	200000b8 	.word	0x200000b8

08000b8c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b090      	sub	sp, #64	; 0x40
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg, "Message transmitted - M1\r\n");
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 8000b9a:	461c      	mov	r4, r3
 8000b9c:	4615      	mov	r5, r2
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	c403      	stmia	r4!, {r0, r1}
 8000ba8:	8022      	strh	r2, [r4, #0]
 8000baa:	3402      	adds	r4, #2
 8000bac:	0c13      	lsrs	r3, r2, #16
 8000bae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&usart2Handle, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb0b 	bl	80001d0 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f107 010c 	add.w	r1, r7, #12
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8000bc8:	f002 fa85 	bl	80030d6 <HAL_UART_Transmit>
}
 8000bcc:	bf00      	nop
 8000bce:	3740      	adds	r7, #64	; 0x40
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd4:	08004254 	.word	0x08004254
 8000bd8:	200000b8 	.word	0x200000b8

08000bdc <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg, "Message transmitted - M2\r\n");
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8000bea:	461c      	mov	r4, r3
 8000bec:	4615      	mov	r5, r2
 8000bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf6:	c403      	stmia	r4!, {r0, r1}
 8000bf8:	8022      	strh	r2, [r4, #0]
 8000bfa:	3402      	adds	r4, #2
 8000bfc:	0c13      	lsrs	r3, r2, #16
 8000bfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&usart2Handle, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fae3 	bl	80001d0 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	f107 010c 	add.w	r1, r7, #12
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 8000c18:	f002 fa5d 	bl	80030d6 <HAL_UART_Transmit>
}
 8000c1c:	bf00      	nop
 8000c1e:	3740      	adds	r7, #64	; 0x40
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bdb0      	pop	{r4, r5, r7, pc}
 8000c24:	08004270 	.word	0x08004270
 8000c28:	200000b8 	.word	0x200000b8

08000c2c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b092      	sub	sp, #72	; 0x48
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t receivedMessage[8];
	char msg[50];

	if(HAL_CAN_GetRxMessage(&can1Handle, CAN_RX_FIFO0, &rxHeader, receivedMessage) != HAL_OK)
 8000c34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c38:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	482c      	ldr	r0, [pc, #176]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000c3e:	f000 fd1c 	bl	800167a <HAL_CAN_GetRxMessage>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		ErrorHandler();
 8000c48:	f7ff fdb6 	bl	80007b8 <ErrorHandler>
	}

	if(rxHeader.StdId == 0x65D && rxHeader.RTR == 0)
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f240 625d 	movw	r2, #1629	; 0x65d
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d112      	bne.n	8000c7e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10e      	bne.n	8000c7e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		// This is data from sent by N1 to N2
		LED_ManageOutput(receivedMessage[0]);
 8000c60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fecb 	bl	8000a00 <LED_ManageOutput>
		sprintf(msg, "Message Received: #%x\r\n", receivedMessage[0]);
 8000c6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	491f      	ldr	r1, [pc, #124]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 feb0 	bl	80039dc <siprintf>
 8000c7c:	e025      	b.n	8000cca <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	}
	else if(rxHeader.StdId == 0x651 && rxHeader.RTR == 1)
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f240 6251 	movw	r2, #1617	; 0x651
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d109      	bne.n	8000c9e <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d105      	bne.n	8000c9e <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
	{
		// This is a remote frame sent by N1 to N2
		SendResponse(rxHeader.StdId);
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff2a 	bl	8000af0 <SendResponse>
 8000c9c:	e023      	b.n	8000ce6 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
		return;
	}
	else if(rxHeader.StdId == 0x651 && rxHeader.RTR == 0)
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f240 6251 	movw	r2, #1617	; 0x651
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10f      	bne.n	8000cca <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10b      	bne.n	8000cca <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	{
		// This is a reply (data frame) by N1 to N2
		sprintf(msg, "Reply Received: %#X\r\n", receivedMessage[0] << 8 | receivedMessage[1]);
 8000cb2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fe89 	bl	80039dc <siprintf>
	}

	HAL_UART_Transmit(&usart2Handle, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa7e 	bl	80001d0 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	f107 010c 	add.w	r1, r7, #12
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000ce2:	f002 f9f8 	bl	80030d6 <HAL_UART_Transmit>
}
 8000ce6:	3748      	adds	r7, #72	; 0x48
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000009c 	.word	0x2000009c
 8000cf0:	20000138 	.word	0x20000138
 8000cf4:	0800428c 	.word	0x0800428c
 8000cf8:	080042a4 	.word	0x080042a4
 8000cfc:	200000b8 	.word	0x200000b8

08000d00 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg, "CAN Error Detected\r\n");
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_CAN_ErrorCallback+0x44>)
 8000d0e:	461c      	mov	r4, r3
 8000d10:	4615      	mov	r5, r2
 8000d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d1a:	6020      	str	r0, [r4, #0]
 8000d1c:	3404      	adds	r4, #4
 8000d1e:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&usart2Handle, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa53 	bl	80001d0 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	f107 010c 	add.w	r1, r7, #12
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <HAL_CAN_ErrorCallback+0x48>)
 8000d38:	f002 f9cd 	bl	80030d6 <HAL_UART_Transmit>
}
 8000d3c:	bf00      	nop
 8000d3e:	3740      	adds	r7, #64	; 0x40
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bdb0      	pop	{r4, r5, r7, pc}
 8000d44:	080042bc 	.word	0x080042bc
 8000d48:	200000b8 	.word	0x200000b8

08000d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	uint8_t message;	// No meaning for Data Frame

	if(reqCounter == 4)
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d11a      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		// N1 sending Remote Frame to N2
		txHeader.DLC = 2;	// N1 demanding 2 bytes of reply
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
		txHeader.StdId = 0x651;
 8000d60:	f240 6351 	movw	r3, #1617	; 0x651
 8000d64:	613b      	str	r3, [r7, #16]
		txHeader.IDE = CAN_ID_STD;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
		txHeader.RTR = CAN_RTR_REMOTE;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61fb      	str	r3, [r7, #28]

		if(HAL_CAN_AddTxMessage(&can1Handle, &txHeader, &message, &txMailbox) != HAL_OK)
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	f107 020b 	add.w	r2, r7, #11
 8000d76:	f107 0110 	add.w	r1, r7, #16
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d7c:	f000 fba2 	bl	80014c4 <HAL_CAN_AddTxMessage>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			ErrorHandler();
 8000d86:	f7ff fd17 	bl	80007b8 <ErrorHandler>
		}
		reqCounter = 0;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
	else
	{
		CAN1_Tx();
		reqCounter++;
	}
}
 8000d90:	e007      	b.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x56>
		CAN1_Tx();
 8000d92:	f7ff fd71 	bl	8000878 <CAN1_Tx>
		reqCounter++;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000008d 	.word	0x2000008d
 8000db0:	20000138 	.word	0x20000138

08000db4 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	// LOW LEVEL PROCESSOR SPECIFIC INITS

	// 1. Set up the priority grouping of the ARM Cortex MX Processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f001 f867 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the ARM Cortex MX Processor
	SCB->SHCSR |= 0x7 << 16;	// Usage Fault, Memory Fault and Bus Fault System Exception
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_MspInit+0x40>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <HAL_MspInit+0x40>)
 8000dc4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000dc8:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f06f 000b 	mvn.w	r0, #11
 8000dd2:	f001 f866 	bl	8001ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f06f 000a 	mvn.w	r0, #10
 8000dde:	f001 f860 	bl	8001ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	f06f 0009 	mvn.w	r0, #9
 8000dea:	f001 f85a 	bl	8001ea2 <HAL_NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	// LOW LEVEL INITS OF THE USART2 PERIPHERAL

	GPIO_InitTypeDef gpioUsart2;

	// 1. Enable the clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

	// 2. Pin muxing configurations
	// PA2 - USART2_TX
	// PA3 - USART2_RX
	gpioUsart2.Pin = GPIO_PIN_2;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
	gpioUsart2.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
	gpioUsart2.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
	gpioUsart2.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
	gpioUsart2.Alternate = GPIO_AF7_USART2;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpioUsart2);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e54:	f001 f886 	bl	8001f64 <HAL_GPIO_Init>

	gpioUsart2.Pin = GPIO_PIN_3;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpioUsart2);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4808      	ldr	r0, [pc, #32]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e64:	f001 f87e 	bl	8001f64 <HAL_GPIO_Init>

	// 3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f001 f836 	bl	8001eda <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	210f      	movs	r1, #15
 8000e72:	2026      	movs	r0, #38	; 0x26
 8000e74:	f001 f815 	bl	8001ea2 <HAL_NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioInit;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_CAN_MspInit+0x90>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_CAN_MspInit+0x90>)
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_CAN_MspInit+0x90>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]

	/* CAN GPIO Configuration
	 * PA11 ---> CAN1_RX
	 * PA12 ---> CAN1_TX
	 */
	gpioInit.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000eac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eb0:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
	gpioInit.Alternate = GPIO_AF9_CAN1;
 8000ebe:	2309      	movs	r3, #9
 8000ec0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpioInit);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <HAL_CAN_MspInit+0x94>)
 8000eca:	f001 f84b 	bl	8001f64 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	2013      	movs	r0, #19
 8000ed4:	f000 ffe5 	bl	8001ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	210f      	movs	r1, #15
 8000edc:	2014      	movs	r0, #20
 8000ede:	f000 ffe0 	bl	8001ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	2015      	movs	r0, #21
 8000ee8:	f000 ffdb 	bl	8001ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	210f      	movs	r1, #15
 8000ef0:	2016      	movs	r0, #22
 8000ef2:	f000 ffd6 	bl	8001ea2 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ef6:	2013      	movs	r0, #19
 8000ef8:	f000 ffef 	bl	8001eda <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000efc:	2014      	movs	r0, #20
 8000efe:	f000 ffec 	bl	8001eda <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f02:	2015      	movs	r0, #21
 8000f04:	f000 ffe9 	bl	8001eda <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f000 ffe6 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SystemInit+0x28>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SystemInit+0x28>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SystemInit+0x28>)
 8000f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
  ldr  r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd3 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f002 fd0b 	bl	8003994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb47 	bl	8000610 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f88:	08004330 	.word	0x08004330
  ldr  r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f90:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f94:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f98:	20000168 	.word	0x20000168

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 ff5f 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff feee 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff77 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 ff3f 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000160 	.word	0x20000160

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000160 	.word	0x20000160

08001084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0ed      	b.n	8001272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fef0 	bl	8000e88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0202 	bic.w	r2, r2, #2
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffd8 	bl	800106c <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffd4 	bl	800106c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0c5      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e5      	bne.n	80010c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff ffb2 	bl	800106c <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff ffae 	bl	800106c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e09f      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0e5      	beq.n	800110c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7e5b      	ldrb	r3, [r3, #25]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e9b      	ldrb	r3, [r3, #26]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0220 	bic.w	r2, r2, #32
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7edb      	ldrb	r3, [r3, #27]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0210 	bic.w	r2, r2, #16
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0210 	orr.w	r2, r2, #16
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7f5b      	ldrb	r3, [r3, #29]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e007      	b.n	800123c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	ea42 0103 	orr.w	r1, r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001292:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001294:	7cfb      	ldrb	r3, [r7, #19]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d003      	beq.n	80012a2 <HAL_CAN_ConfigFilter+0x26>
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	2b02      	cmp	r3, #2
 800129e:	f040 80be 	bne.w	800141e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <HAL_CAN_ConfigFilter+0x1bc>)
 80012a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	431a      	orrs	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	2201      	movs	r2, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	401a      	ands	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d123      	bne.n	800134c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001326:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3248      	adds	r2, #72	; 0x48
 800132c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001340:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001342:	6979      	ldr	r1, [r7, #20]
 8001344:	3348      	adds	r3, #72	; 0x48
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d122      	bne.n	800139a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001374:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3248      	adds	r2, #72	; 0x48
 800137a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	3348      	adds	r3, #72	; 0x48
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	401a      	ands	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013b4:	e007      	b.n	80013c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	431a      	orrs	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	401a      	ands	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013e0:	e007      	b.n	80013f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001410:	f023 0201 	bic.w	r2, r3, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e006      	b.n	800142c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
  }
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40006400 	.word	0x40006400

0800143c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d12e      	bne.n	80014ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fe00 	bl	800106c <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800146e:	e012      	b.n	8001496 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001470:	f7ff fdfc 	bl	800106c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d90b      	bls.n	8001496 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e012      	b.n	80014bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e5      	bne.n	8001470 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e006      	b.n	80014bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d003      	beq.n	80014f0 <HAL_CAN_AddTxMessage+0x2c>
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	f040 80b8 	bne.w	8001660 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80a0 	beq.w	8001650 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	0e1b      	lsrs	r3, r3, #24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d907      	bls.n	8001530 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e09e      	b.n	800166e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001530:	2201      	movs	r2, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	409a      	lsls	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	6809      	ldr	r1, [r1, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e00f      	b.n	800157e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001568:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001572:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3318      	adds	r3, #24
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3318      	adds	r3, #24
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	3304      	adds	r3, #4
 8001590:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	7d1b      	ldrb	r3, [r3, #20]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d111      	bne.n	80015be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3318      	adds	r3, #24
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	3304      	adds	r3, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3318      	adds	r3, #24
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	440b      	add	r3, r1
 80015ba:	3304      	adds	r3, #4
 80015bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3307      	adds	r3, #7
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	061a      	lsls	r2, r3, #24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3306      	adds	r3, #6
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3305      	adds	r3, #5
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4313      	orrs	r3, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	3204      	adds	r2, #4
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	4610      	mov	r0, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	6811      	ldr	r1, [r2, #0]
 80015e6:	ea43 0200 	orr.w	r2, r3, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3303      	adds	r3, #3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	061a      	lsls	r2, r3, #24
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3302      	adds	r3, #2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	4313      	orrs	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	4610      	mov	r0, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6811      	ldr	r1, [r2, #0]
 800161c:	ea43 0200 	orr.w	r2, r3, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800162a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3318      	adds	r3, #24
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	6811      	ldr	r1, [r2, #0]
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3318      	adds	r3, #24
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	440b      	add	r3, r1
 800164a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e00e      	b.n	800166e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e006      	b.n	800166e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d003      	beq.n	800169e <HAL_CAN_GetRxMessage+0x24>
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 80f3 	bne.w	8001884 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10e      	bne.n	80016c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0e7      	b.n	8001892 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0d8      	b.n	8001892 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	331b      	adds	r3, #27
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0204 	and.w	r2, r3, #4
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	331b      	adds	r3, #27
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0d5b      	lsrs	r3, r3, #21
 800170e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00b      	b.n	8001730 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	331b      	adds	r3, #27
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0202 	and.w	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	331b      	adds	r3, #27
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 020f 	and.w	r2, r3, #15
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	331b      	adds	r3, #27
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	3304      	adds	r3, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	331b      	adds	r3, #27
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0a1a      	lsrs	r2, r3, #8
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0c1a      	lsrs	r2, r3, #16
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e1a      	lsrs	r2, r3, #24
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3303      	adds	r3, #3
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3304      	adds	r3, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0a1a      	lsrs	r2, r3, #8
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3305      	adds	r3, #5
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1a      	lsrs	r2, r3, #16
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3306      	adds	r3, #6
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0e1a      	lsrs	r2, r3, #24
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3307      	adds	r3, #7
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	e007      	b.n	8001880 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	e006      	b.n	8001892 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d002      	beq.n	80018bc <HAL_CAN_ActivateNotification+0x1e>
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d109      	bne.n	80018d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e006      	b.n	80018de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b08a      	sub	sp, #40	; 0x28
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d07c      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d023      	beq.n	8001982 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff f8f5 	bl	8000b3c <HAL_CAN_TxMailbox0CompleteCallback>
 8001952:	e016      	b.n	8001982 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e00c      	b.n	8001982 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e002      	b.n	8001982 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f965 	bl	8001c4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d024      	beq.n	80019d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001994:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f8f3 	bl	8000b8c <HAL_CAN_TxMailbox1CompleteCallback>
 80019a6:	e016      	b.n	80019d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e00c      	b.n	80019d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e002      	b.n	80019d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f945 	bl	8001c60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d024      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f8f1 	bl	8000bdc <HAL_CAN_TxMailbox2CompleteCallback>
 80019fa:	e016      	b.n	8001a2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e00c      	b.n	8001a2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	e002      	b.n	8001a2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f925 	bl	8001c74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00b      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2208      	movs	r2, #8
 8001a68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f90c 	bl	8001c88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff f8cf 	bl	8000c2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00c      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2210      	movs	r2, #16
 8001ab0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2208      	movs	r2, #8
 8001acc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8ee 	bl	8001cb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8d5 	bl	8001c9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8d8 	bl	8001cc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8d1 	bl	8001cd8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d075      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06c      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d03d      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d038      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bb8:	2b30      	cmp	r3, #48	; 0x30
 8001bba:	d017      	beq.n	8001bec <HAL_CAN_IRQHandler+0x302>
 8001bbc:	2b30      	cmp	r3, #48	; 0x30
 8001bbe:	d804      	bhi.n	8001bca <HAL_CAN_IRQHandler+0x2e0>
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d009      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x2ee>
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d00c      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bc8:	e024      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001bca:	2b50      	cmp	r3, #80	; 0x50
 8001bcc:	d018      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x316>
 8001bce:	2b60      	cmp	r3, #96	; 0x60
 8001bd0:	d01b      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x320>
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d00f      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001bd6:	e01d      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be0:	e018      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bea:	e013      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf4:	e00e      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfe:	e009      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c08:	e004      	b.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff f85e 	bl	8000d00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d106      	bne.n	8001f2c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f2a:	e005      	b.n	8001f38 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f4c:	f000 f802 	bl	8001f54 <HAL_SYSTICK_Callback>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e16b      	b.n	8002258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 815a 	bne.w	8002252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d00b      	beq.n	8001fbe <HAL_GPIO_Init+0x5a>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb2:	2b11      	cmp	r3, #17
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0xfc>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b12      	cmp	r3, #18
 800205e:	d123      	bne.n	80020a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3208      	adds	r2, #8
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80b4 	beq.w	8002252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_GPIO_Init+0x308>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_GPIO_Init+0x308>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_GPIO_Init+0x308>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002106:	4a5a      	ldr	r2, [pc, #360]	; (8002270 <HAL_GPIO_Init+0x30c>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_GPIO_Init+0x310>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <HAL_GPIO_Init+0x226>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a50      	ldr	r2, [pc, #320]	; (8002278 <HAL_GPIO_Init+0x314>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d025      	beq.n	8002186 <HAL_GPIO_Init+0x222>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4f      	ldr	r2, [pc, #316]	; (800227c <HAL_GPIO_Init+0x318>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <HAL_GPIO_Init+0x21e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4e      	ldr	r2, [pc, #312]	; (8002280 <HAL_GPIO_Init+0x31c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x21a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_GPIO_Init+0x320>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x216>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <HAL_GPIO_Init+0x324>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x212>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4b      	ldr	r2, [pc, #300]	; (800228c <HAL_GPIO_Init+0x328>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_GPIO_Init+0x32c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x20a>
 800216a:	2307      	movs	r3, #7
 800216c:	e00e      	b.n	800218c <HAL_GPIO_Init+0x228>
 800216e:	2308      	movs	r3, #8
 8002170:	e00c      	b.n	800218c <HAL_GPIO_Init+0x228>
 8002172:	2306      	movs	r3, #6
 8002174:	e00a      	b.n	800218c <HAL_GPIO_Init+0x228>
 8002176:	2305      	movs	r3, #5
 8002178:	e008      	b.n	800218c <HAL_GPIO_Init+0x228>
 800217a:	2304      	movs	r3, #4
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x228>
 800217e:	2303      	movs	r3, #3
 8002180:	e004      	b.n	800218c <HAL_GPIO_Init+0x228>
 8002182:	2302      	movs	r3, #2
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x228>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x228>
 800218a:	2300      	movs	r3, #0
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f002 0203 	and.w	r2, r2, #3
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	4093      	lsls	r3, r2
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800219c:	4934      	ldr	r1, [pc, #208]	; (8002270 <HAL_GPIO_Init+0x30c>)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_GPIO_Init+0x330>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ce:	4a31      	ldr	r2, [pc, #196]	; (8002294 <HAL_GPIO_Init+0x330>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d4:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <HAL_GPIO_Init+0x330>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <HAL_GPIO_Init+0x330>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_GPIO_Init+0x330>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_GPIO_Init+0x330>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_GPIO_Init+0x330>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_GPIO_Init+0x330>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3301      	adds	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b0f      	cmp	r3, #15
 800225c:	f67f ae90 	bls.w	8001f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002260:	bf00      	nop
 8002262:	3724      	adds	r7, #36	; 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40021400 	.word	0x40021400
 800228c:	40021800 	.word	0x40021800
 8002290:	40021c00 	.word	0x40021c00
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	401a      	ands	r2, r3
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d104      	bne.n	80022ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80022ec:	e002      	b.n	80022f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	619a      	str	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f806 	bl	8002330 <HAL_GPIO_EXTI_Callback>
  }
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e25b      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d075      	beq.n	8002452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002366:	4ba3      	ldr	r3, [pc, #652]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00c      	beq.n	800238c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4ba0      	ldr	r3, [pc, #640]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237a:	2b08      	cmp	r3, #8
 800237c:	d112      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b9d      	ldr	r3, [pc, #628]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238a:	d10b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4b99      	ldr	r3, [pc, #612]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05b      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d157      	bne.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e236      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x74>
 80023ae:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a90      	ldr	r2, [pc, #576]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a8a      	ldr	r2, [pc, #552]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a87      	ldr	r2, [pc, #540]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023e0:	4b84      	ldr	r3, [pc, #528]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a83      	ldr	r2, [pc, #524]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fe34 	bl	800106c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fe30 	bl	800106c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1fb      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xc0>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fe20 	bl	800106c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fe1c 	bl	800106c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1e7      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d063      	beq.n	8002526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b62      	ldr	r3, [pc, #392]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d11c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d116      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1bb      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4952      	ldr	r1, [pc, #328]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	e03a      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b8:	4b4f      	ldr	r3, [pc, #316]	; (80025f8 <HAL_RCC_OscConfig+0x2b0>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fdd5 	bl	800106c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe fdd1 	bl	800106c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e19c      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4940      	ldr	r1, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e015      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_RCC_OscConfig+0x2b0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fdb4 	bl	800106c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe fdb0 	bl	800106c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e17b      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d030      	beq.n	8002594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253a:	4b30      	ldr	r3, [pc, #192]	; (80025fc <HAL_RCC_OscConfig+0x2b4>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fd94 	bl	800106c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fd90 	bl	800106c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e15b      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x200>
 8002566:	e015      	b.n	8002594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <HAL_RCC_OscConfig+0x2b4>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fd7d 	bl	800106c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002576:	f7fe fd79 	bl	800106c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e144      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a0 	beq.w	80026e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d121      	bne.n	8002622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_OscConfig+0x2b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_RCC_OscConfig+0x2b8>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fd3f 	bl	800106c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e011      	b.n	8002616 <HAL_RCC_OscConfig+0x2ce>
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	42470000 	.word	0x42470000
 80025fc:	42470e80 	.word	0x42470e80
 8002600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe fd32 	bl	800106c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0fd      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b81      	ldr	r3, [pc, #516]	; (800281c <HAL_RCC_OscConfig+0x4d4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x2f0>
 800262a:	4b7d      	ldr	r3, [pc, #500]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	4a7c      	ldr	r2, [pc, #496]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6713      	str	r3, [r2, #112]	; 0x70
 8002636:	e01c      	b.n	8002672 <HAL_RCC_OscConfig+0x32a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x312>
 8002640:	4b77      	ldr	r3, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a76      	ldr	r2, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	4b74      	ldr	r3, [pc, #464]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a73      	ldr	r2, [pc, #460]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x32a>
 800265a:	4b71      	ldr	r3, [pc, #452]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a70      	ldr	r2, [pc, #448]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	4b6e      	ldr	r3, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a6d      	ldr	r2, [pc, #436]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fcf7 	bl	800106c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fcf3 	bl	800106c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0bc      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCC_OscConfig+0x33a>
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fce1 	bl	800106c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fcdd 	bl	800106c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0a6      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ee      	bne.n	80026ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8092 	beq.w	8002810 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ec:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d05c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d141      	bne.n	8002784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b48      	ldr	r3, [pc, #288]	; (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fcb1 	bl	800106c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fcad 	bl	800106c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e078      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	019b      	lsls	r3, r3, #6
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	061b      	lsls	r3, r3, #24
 8002750:	4933      	ldr	r1, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002756:	4b33      	ldr	r3, [pc, #204]	; (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fc86 	bl	800106c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fc82 	bl	800106c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e04d      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x41c>
 8002782:	e045      	b.n	8002810 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fc6f 	bl	800106c <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe fc6b 	bl	800106c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e036      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x44a>
 80027b0:	e02e      	b.n	8002810 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e029      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d11c      	bne.n	800280c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d115      	bne.n	800280c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10d      	bne.n	800280c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d106      	bne.n	800280c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40007000 	.word	0x40007000
 8002820:	40023800 	.word	0x40023800
 8002824:	42470060 	.word	0x42470060

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe fba8 	bl	800106c <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fba4 	bl	800106c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4601      	mov	r1, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	fa21 f303 	lsr.w	r3, r1, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fb08 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080042d4 	.word	0x080042d4
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	2300      	movs	r3, #0
 8002a04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0a:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d007      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x32>
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d008      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x38>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 808d 	bne.w	8002b3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a22:	60bb      	str	r3, [r7, #8]
       break;
 8002a24:	e08c      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a28:	60bb      	str	r3, [r7, #8]
      break;
 8002a2a:	e089      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a36:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d023      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	ea03 0501 	and.w	r5, r3, r1
 8002a58:	ea04 0602 	and.w	r6, r4, r2
 8002a5c:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a5e:	fb02 f106 	mul.w	r1, r2, r6
 8002a62:	2200      	movs	r2, #0
 8002a64:	fb02 f205 	mul.w	r2, r2, r5
 8002a68:	440a      	add	r2, r1
 8002a6a:	493a      	ldr	r1, [pc, #232]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a6c:	fba5 0101 	umull	r0, r1, r5, r1
 8002a70:	1853      	adds	r3, r2, r1
 8002a72:	4619      	mov	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	f7fd fbff 	bl	8000280 <__aeabi_uldivmod>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e049      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	f04f 0400 	mov.w	r4, #0
 8002a94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	ea03 0501 	and.w	r5, r3, r1
 8002aa0:	ea04 0602 	and.w	r6, r4, r2
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	4632      	mov	r2, r6
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	f04f 0400 	mov.w	r4, #0
 8002ab0:	0154      	lsls	r4, r2, #5
 8002ab2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ab6:	014b      	lsls	r3, r1, #5
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4622      	mov	r2, r4
 8002abc:	1b49      	subs	r1, r1, r5
 8002abe:	eb62 0206 	sbc.w	r2, r2, r6
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	f04f 0400 	mov.w	r4, #0
 8002aca:	0194      	lsls	r4, r2, #6
 8002acc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ad0:	018b      	lsls	r3, r1, #6
 8002ad2:	1a5b      	subs	r3, r3, r1
 8002ad4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	00e2      	lsls	r2, r4, #3
 8002ae2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ae6:	00d9      	lsls	r1, r3, #3
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4614      	mov	r4, r2
 8002aec:	195b      	adds	r3, r3, r5
 8002aee:	eb44 0406 	adc.w	r4, r4, r6
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	02a2      	lsls	r2, r4, #10
 8002afc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b00:	0299      	lsls	r1, r3, #10
 8002b02:	460b      	mov	r3, r1
 8002b04:	4614      	mov	r4, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	4621      	mov	r1, r4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	f7fd fbb4 	bl	8000280 <__aeabi_uldivmod>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	60bb      	str	r3, [r7, #8]
      break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b3c:	60bb      	str	r3, [r7, #8]
      break;
 8002b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b40:	68bb      	ldr	r3, [r7, #8]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	017d7840 	.word	0x017d7840

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b78:	4601      	mov	r1, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	080042e4 	.word	0x080042e4

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b9c:	f7ff ffdc 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0b5b      	lsrs	r3, r3, #13
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	080042e4 	.word	0x080042e4

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e01d      	b.n	8002c0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f815 	bl	8002c16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 f968 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d007      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d122      	bne.n	8002cce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d11b      	bne.n	8002cce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0202 	mvn.w	r2, #2
 8002c9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8ee 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002cba:	e005      	b.n	8002cc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f8e0 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8f1 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d122      	bne.n	8002d22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d11b      	bne.n	8002d22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0204 	mvn.w	r2, #4
 8002cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8c4 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d0e:	e005      	b.n	8002d1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f8b6 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8c7 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d122      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11b      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0208 	mvn.w	r2, #8
 8002d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f89a 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d62:	e005      	b.n	8002d70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f88c 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f89d 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d122      	bne.n	8002dca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d11b      	bne.n	8002dca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f06f 0210 	mvn.w	r2, #16
 8002d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2208      	movs	r2, #8
 8002da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f870 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002db6:	e005      	b.n	8002dc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f862 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f873 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10e      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f06f 0201 	mvn.w	r2, #1
 8002dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd ffab 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d10e      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f903 	bl	8003028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d10e      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d107      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f838 	bl	8002ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d10e      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0220 	mvn.w	r2, #32
 8002e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8cd 	bl	8003014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00f      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3d      	ldr	r2, [pc, #244]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <TIM_Base_SetConfig+0x120>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2f      	ldr	r2, [pc, #188]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d027      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d023      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <TIM_Base_SetConfig+0x120>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d017      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <TIM_Base_SetConfig+0x128>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <TIM_Base_SetConfig+0x12c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a26      	ldr	r2, [pc, #152]	; (8003004 <TIM_Base_SetConfig+0x130>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_Base_SetConfig+0x134>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a24      	ldr	r2, [pc, #144]	; (800300c <TIM_Base_SetConfig+0x138>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a23      	ldr	r2, [pc, #140]	; (8003010 <TIM_Base_SetConfig+0x13c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800
 8003008:	40001800 	.word	0x40001800
 800300c:	40001c00 	.word	0x40001c00
 8003010:	40002000 	.word	0x40002000

08003014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e03f      	b.n	80030ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fec8 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800307e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f90b 	bl	800329c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b088      	sub	sp, #32
 80030da:	af02      	add	r7, sp, #8
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	f040 8083 	bne.w	80031fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UART_Transmit+0x2e>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e07b      	b.n	8003200 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_UART_Transmit+0x40>
 8003112:	2302      	movs	r3, #2
 8003114:	e074      	b.n	8003200 <HAL_UART_Transmit+0x12a>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2221      	movs	r2, #33	; 0x21
 8003128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800312c:	f7fd ff9e 	bl	800106c <HAL_GetTick>
 8003130:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003146:	e042      	b.n	80031ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d122      	bne.n	80031a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2200      	movs	r2, #0
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f84c 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e042      	b.n	8003200 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3302      	adds	r3, #2
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	e017      	b.n	80031ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	e013      	b.n	80031ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f829 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e01f      	b.n	8003200 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	60ba      	str	r2, [r7, #8]
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1b7      	bne.n	8003148 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f810 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e006      	b.n	8003200 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
  }
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	e02c      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d028      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x30>
 8003228:	f7fd ff20 	bl	800106c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	429a      	cmp	r2, r3
 8003236:	d21d      	bcs.n	8003274 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003246:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e00f      	b.n	8003294 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	429a      	cmp	r2, r3
 8003290:	d0c3      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032de:	f023 030c 	bic.w	r3, r3, #12
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330a:	f040 818b 	bne.w	8003624 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4ac1      	ldr	r2, [pc, #772]	; (8003618 <UART_SetConfig+0x37c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d005      	beq.n	8003324 <UART_SetConfig+0x88>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4abf      	ldr	r2, [pc, #764]	; (800361c <UART_SetConfig+0x380>)
 800331e:	4293      	cmp	r3, r2
 8003320:	f040 80bd 	bne.w	800349e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7ff fc38 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8003328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	461d      	mov	r5, r3
 800332e:	f04f 0600 	mov.w	r6, #0
 8003332:	46a8      	mov	r8, r5
 8003334:	46b1      	mov	r9, r6
 8003336:	eb18 0308 	adds.w	r3, r8, r8
 800333a:	eb49 0409 	adc.w	r4, r9, r9
 800333e:	4698      	mov	r8, r3
 8003340:	46a1      	mov	r9, r4
 8003342:	eb18 0805 	adds.w	r8, r8, r5
 8003346:	eb49 0906 	adc.w	r9, r9, r6
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800335a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800335e:	4688      	mov	r8, r1
 8003360:	4691      	mov	r9, r2
 8003362:	eb18 0005 	adds.w	r0, r8, r5
 8003366:	eb49 0106 	adc.w	r1, r9, r6
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	461d      	mov	r5, r3
 8003370:	f04f 0600 	mov.w	r6, #0
 8003374:	196b      	adds	r3, r5, r5
 8003376:	eb46 0406 	adc.w	r4, r6, r6
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	f7fc ff7f 	bl	8000280 <__aeabi_uldivmod>
 8003382:	4603      	mov	r3, r0
 8003384:	460c      	mov	r4, r1
 8003386:	461a      	mov	r2, r3
 8003388:	4ba5      	ldr	r3, [pc, #660]	; (8003620 <UART_SetConfig+0x384>)
 800338a:	fba3 2302 	umull	r2, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	461d      	mov	r5, r3
 8003398:	f04f 0600 	mov.w	r6, #0
 800339c:	46a9      	mov	r9, r5
 800339e:	46b2      	mov	sl, r6
 80033a0:	eb19 0309 	adds.w	r3, r9, r9
 80033a4:	eb4a 040a 	adc.w	r4, sl, sl
 80033a8:	4699      	mov	r9, r3
 80033aa:	46a2      	mov	sl, r4
 80033ac:	eb19 0905 	adds.w	r9, r9, r5
 80033b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c8:	4689      	mov	r9, r1
 80033ca:	4692      	mov	sl, r2
 80033cc:	eb19 0005 	adds.w	r0, r9, r5
 80033d0:	eb4a 0106 	adc.w	r1, sl, r6
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	461d      	mov	r5, r3
 80033da:	f04f 0600 	mov.w	r6, #0
 80033de:	196b      	adds	r3, r5, r5
 80033e0:	eb46 0406 	adc.w	r4, r6, r6
 80033e4:	461a      	mov	r2, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	f7fc ff4a 	bl	8000280 <__aeabi_uldivmod>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <UART_SetConfig+0x384>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a86      	ldr	r2, [pc, #536]	; (8003620 <UART_SetConfig+0x384>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003414:	4498      	add	r8, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	461d      	mov	r5, r3
 800341a:	f04f 0600 	mov.w	r6, #0
 800341e:	46a9      	mov	r9, r5
 8003420:	46b2      	mov	sl, r6
 8003422:	eb19 0309 	adds.w	r3, r9, r9
 8003426:	eb4a 040a 	adc.w	r4, sl, sl
 800342a:	4699      	mov	r9, r3
 800342c:	46a2      	mov	sl, r4
 800342e:	eb19 0905 	adds.w	r9, r9, r5
 8003432:	eb4a 0a06 	adc.w	sl, sl, r6
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800344a:	4689      	mov	r9, r1
 800344c:	4692      	mov	sl, r2
 800344e:	eb19 0005 	adds.w	r0, r9, r5
 8003452:	eb4a 0106 	adc.w	r1, sl, r6
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	461d      	mov	r5, r3
 800345c:	f04f 0600 	mov.w	r6, #0
 8003460:	196b      	adds	r3, r5, r5
 8003462:	eb46 0406 	adc.w	r4, r6, r6
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	f7fc ff09 	bl	8000280 <__aeabi_uldivmod>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	461a      	mov	r2, r3
 8003474:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <UART_SetConfig+0x384>)
 8003476:	fba3 1302 	umull	r1, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2164      	movs	r1, #100	; 0x64
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	3332      	adds	r3, #50	; 0x32
 8003488:	4a65      	ldr	r2, [pc, #404]	; (8003620 <UART_SetConfig+0x384>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	f003 0207 	and.w	r2, r3, #7
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4442      	add	r2, r8
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	e26f      	b.n	800397e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800349e:	f7ff fb67 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 80034a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	461d      	mov	r5, r3
 80034a8:	f04f 0600 	mov.w	r6, #0
 80034ac:	46a8      	mov	r8, r5
 80034ae:	46b1      	mov	r9, r6
 80034b0:	eb18 0308 	adds.w	r3, r8, r8
 80034b4:	eb49 0409 	adc.w	r4, r9, r9
 80034b8:	4698      	mov	r8, r3
 80034ba:	46a1      	mov	r9, r4
 80034bc:	eb18 0805 	adds.w	r8, r8, r5
 80034c0:	eb49 0906 	adc.w	r9, r9, r6
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034d8:	4688      	mov	r8, r1
 80034da:	4691      	mov	r9, r2
 80034dc:	eb18 0005 	adds.w	r0, r8, r5
 80034e0:	eb49 0106 	adc.w	r1, r9, r6
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	461d      	mov	r5, r3
 80034ea:	f04f 0600 	mov.w	r6, #0
 80034ee:	196b      	adds	r3, r5, r5
 80034f0:	eb46 0406 	adc.w	r4, r6, r6
 80034f4:	461a      	mov	r2, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	f7fc fec2 	bl	8000280 <__aeabi_uldivmod>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	461a      	mov	r2, r3
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <UART_SetConfig+0x384>)
 8003504:	fba3 2302 	umull	r2, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	461d      	mov	r5, r3
 8003512:	f04f 0600 	mov.w	r6, #0
 8003516:	46a9      	mov	r9, r5
 8003518:	46b2      	mov	sl, r6
 800351a:	eb19 0309 	adds.w	r3, r9, r9
 800351e:	eb4a 040a 	adc.w	r4, sl, sl
 8003522:	4699      	mov	r9, r3
 8003524:	46a2      	mov	sl, r4
 8003526:	eb19 0905 	adds.w	r9, r9, r5
 800352a:	eb4a 0a06 	adc.w	sl, sl, r6
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800353e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003542:	4689      	mov	r9, r1
 8003544:	4692      	mov	sl, r2
 8003546:	eb19 0005 	adds.w	r0, r9, r5
 800354a:	eb4a 0106 	adc.w	r1, sl, r6
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	461d      	mov	r5, r3
 8003554:	f04f 0600 	mov.w	r6, #0
 8003558:	196b      	adds	r3, r5, r5
 800355a:	eb46 0406 	adc.w	r4, r6, r6
 800355e:	461a      	mov	r2, r3
 8003560:	4623      	mov	r3, r4
 8003562:	f7fc fe8d 	bl	8000280 <__aeabi_uldivmod>
 8003566:	4603      	mov	r3, r0
 8003568:	460c      	mov	r4, r1
 800356a:	461a      	mov	r2, r3
 800356c:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <UART_SetConfig+0x384>)
 800356e:	fba3 1302 	umull	r1, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2164      	movs	r1, #100	; 0x64
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	3332      	adds	r3, #50	; 0x32
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <UART_SetConfig+0x384>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800358e:	4498      	add	r8, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	461d      	mov	r5, r3
 8003594:	f04f 0600 	mov.w	r6, #0
 8003598:	46a9      	mov	r9, r5
 800359a:	46b2      	mov	sl, r6
 800359c:	eb19 0309 	adds.w	r3, r9, r9
 80035a0:	eb4a 040a 	adc.w	r4, sl, sl
 80035a4:	4699      	mov	r9, r3
 80035a6:	46a2      	mov	sl, r4
 80035a8:	eb19 0905 	adds.w	r9, r9, r5
 80035ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035c4:	4689      	mov	r9, r1
 80035c6:	4692      	mov	sl, r2
 80035c8:	eb19 0005 	adds.w	r0, r9, r5
 80035cc:	eb4a 0106 	adc.w	r1, sl, r6
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	461d      	mov	r5, r3
 80035d6:	f04f 0600 	mov.w	r6, #0
 80035da:	196b      	adds	r3, r5, r5
 80035dc:	eb46 0406 	adc.w	r4, r6, r6
 80035e0:	461a      	mov	r2, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	f7fc fe4c 	bl	8000280 <__aeabi_uldivmod>
 80035e8:	4603      	mov	r3, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <UART_SetConfig+0x384>)
 80035f0:	fba3 1302 	umull	r1, r3, r3, r2
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	2164      	movs	r1, #100	; 0x64
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	3332      	adds	r3, #50	; 0x32
 8003602:	4a07      	ldr	r2, [pc, #28]	; (8003620 <UART_SetConfig+0x384>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	f003 0207 	and.w	r2, r3, #7
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4442      	add	r2, r8
 8003614:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003616:	e1b2      	b.n	800397e <UART_SetConfig+0x6e2>
 8003618:	40011000 	.word	0x40011000
 800361c:	40011400 	.word	0x40011400
 8003620:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4ad7      	ldr	r2, [pc, #860]	; (8003988 <UART_SetConfig+0x6ec>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d005      	beq.n	800363a <UART_SetConfig+0x39e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4ad6      	ldr	r2, [pc, #856]	; (800398c <UART_SetConfig+0x6f0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	f040 80d1 	bne.w	80037dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800363a:	f7ff faad 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 800363e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	469a      	mov	sl, r3
 8003644:	f04f 0b00 	mov.w	fp, #0
 8003648:	46d0      	mov	r8, sl
 800364a:	46d9      	mov	r9, fp
 800364c:	eb18 0308 	adds.w	r3, r8, r8
 8003650:	eb49 0409 	adc.w	r4, r9, r9
 8003654:	4698      	mov	r8, r3
 8003656:	46a1      	mov	r9, r4
 8003658:	eb18 080a 	adds.w	r8, r8, sl
 800365c:	eb49 090b 	adc.w	r9, r9, fp
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800366c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003670:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003674:	4688      	mov	r8, r1
 8003676:	4691      	mov	r9, r2
 8003678:	eb1a 0508 	adds.w	r5, sl, r8
 800367c:	eb4b 0609 	adc.w	r6, fp, r9
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4619      	mov	r1, r3
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	f04f 0400 	mov.w	r4, #0
 8003692:	0094      	lsls	r4, r2, #2
 8003694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003698:	008b      	lsls	r3, r1, #2
 800369a:	461a      	mov	r2, r3
 800369c:	4623      	mov	r3, r4
 800369e:	4628      	mov	r0, r5
 80036a0:	4631      	mov	r1, r6
 80036a2:	f7fc fded 	bl	8000280 <__aeabi_uldivmod>
 80036a6:	4603      	mov	r3, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	461a      	mov	r2, r3
 80036ac:	4bb8      	ldr	r3, [pc, #736]	; (8003990 <UART_SetConfig+0x6f4>)
 80036ae:	fba3 2302 	umull	r2, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	469b      	mov	fp, r3
 80036bc:	f04f 0c00 	mov.w	ip, #0
 80036c0:	46d9      	mov	r9, fp
 80036c2:	46e2      	mov	sl, ip
 80036c4:	eb19 0309 	adds.w	r3, r9, r9
 80036c8:	eb4a 040a 	adc.w	r4, sl, sl
 80036cc:	4699      	mov	r9, r3
 80036ce:	46a2      	mov	sl, r4
 80036d0:	eb19 090b 	adds.w	r9, r9, fp
 80036d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ec:	4689      	mov	r9, r1
 80036ee:	4692      	mov	sl, r2
 80036f0:	eb1b 0509 	adds.w	r5, fp, r9
 80036f4:	eb4c 060a 	adc.w	r6, ip, sl
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	f04f 0400 	mov.w	r4, #0
 800370a:	0094      	lsls	r4, r2, #2
 800370c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	461a      	mov	r2, r3
 8003714:	4623      	mov	r3, r4
 8003716:	4628      	mov	r0, r5
 8003718:	4631      	mov	r1, r6
 800371a:	f7fc fdb1 	bl	8000280 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	461a      	mov	r2, r3
 8003724:	4b9a      	ldr	r3, [pc, #616]	; (8003990 <UART_SetConfig+0x6f4>)
 8003726:	fba3 1302 	umull	r1, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2164      	movs	r1, #100	; 0x64
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a95      	ldr	r2, [pc, #596]	; (8003990 <UART_SetConfig+0x6f4>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003744:	4498      	add	r8, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	469b      	mov	fp, r3
 800374a:	f04f 0c00 	mov.w	ip, #0
 800374e:	46d9      	mov	r9, fp
 8003750:	46e2      	mov	sl, ip
 8003752:	eb19 0309 	adds.w	r3, r9, r9
 8003756:	eb4a 040a 	adc.w	r4, sl, sl
 800375a:	4699      	mov	r9, r3
 800375c:	46a2      	mov	sl, r4
 800375e:	eb19 090b 	adds.w	r9, r9, fp
 8003762:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800377a:	4689      	mov	r9, r1
 800377c:	4692      	mov	sl, r2
 800377e:	eb1b 0509 	adds.w	r5, fp, r9
 8003782:	eb4c 060a 	adc.w	r6, ip, sl
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4619      	mov	r1, r3
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f04f 0400 	mov.w	r4, #0
 8003798:	0094      	lsls	r4, r2, #2
 800379a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800379e:	008b      	lsls	r3, r1, #2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	4628      	mov	r0, r5
 80037a6:	4631      	mov	r1, r6
 80037a8:	f7fc fd6a 	bl	8000280 <__aeabi_uldivmod>
 80037ac:	4603      	mov	r3, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b77      	ldr	r3, [pc, #476]	; (8003990 <UART_SetConfig+0x6f4>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a72      	ldr	r2, [pc, #456]	; (8003990 <UART_SetConfig+0x6f4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4442      	add	r2, r8
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	e0d0      	b.n	800397e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7ff f9c8 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 80037e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	469a      	mov	sl, r3
 80037e6:	f04f 0b00 	mov.w	fp, #0
 80037ea:	46d0      	mov	r8, sl
 80037ec:	46d9      	mov	r9, fp
 80037ee:	eb18 0308 	adds.w	r3, r8, r8
 80037f2:	eb49 0409 	adc.w	r4, r9, r9
 80037f6:	4698      	mov	r8, r3
 80037f8:	46a1      	mov	r9, r4
 80037fa:	eb18 080a 	adds.w	r8, r8, sl
 80037fe:	eb49 090b 	adc.w	r9, r9, fp
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800380e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003812:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003816:	4688      	mov	r8, r1
 8003818:	4691      	mov	r9, r2
 800381a:	eb1a 0508 	adds.w	r5, sl, r8
 800381e:	eb4b 0609 	adc.w	r6, fp, r9
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	0094      	lsls	r4, r2, #2
 8003836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800383a:	008b      	lsls	r3, r1, #2
 800383c:	461a      	mov	r2, r3
 800383e:	4623      	mov	r3, r4
 8003840:	4628      	mov	r0, r5
 8003842:	4631      	mov	r1, r6
 8003844:	f7fc fd1c 	bl	8000280 <__aeabi_uldivmod>
 8003848:	4603      	mov	r3, r0
 800384a:	460c      	mov	r4, r1
 800384c:	461a      	mov	r2, r3
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <UART_SetConfig+0x6f4>)
 8003850:	fba3 2302 	umull	r2, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	469b      	mov	fp, r3
 800385e:	f04f 0c00 	mov.w	ip, #0
 8003862:	46d9      	mov	r9, fp
 8003864:	46e2      	mov	sl, ip
 8003866:	eb19 0309 	adds.w	r3, r9, r9
 800386a:	eb4a 040a 	adc.w	r4, sl, sl
 800386e:	4699      	mov	r9, r3
 8003870:	46a2      	mov	sl, r4
 8003872:	eb19 090b 	adds.w	r9, r9, fp
 8003876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800388a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800388e:	4689      	mov	r9, r1
 8003890:	4692      	mov	sl, r2
 8003892:	eb1b 0509 	adds.w	r5, fp, r9
 8003896:	eb4c 060a 	adc.w	r6, ip, sl
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4619      	mov	r1, r3
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	0094      	lsls	r4, r2, #2
 80038ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	4628      	mov	r0, r5
 80038ba:	4631      	mov	r1, r6
 80038bc:	f7fc fce0 	bl	8000280 <__aeabi_uldivmod>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b32      	ldr	r3, [pc, #200]	; (8003990 <UART_SetConfig+0x6f4>)
 80038c8:	fba3 1302 	umull	r1, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	2164      	movs	r1, #100	; 0x64
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	3332      	adds	r3, #50	; 0x32
 80038da:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <UART_SetConfig+0x6f4>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e6:	4498      	add	r8, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	469b      	mov	fp, r3
 80038ec:	f04f 0c00 	mov.w	ip, #0
 80038f0:	46d9      	mov	r9, fp
 80038f2:	46e2      	mov	sl, ip
 80038f4:	eb19 0309 	adds.w	r3, r9, r9
 80038f8:	eb4a 040a 	adc.w	r4, sl, sl
 80038fc:	4699      	mov	r9, r3
 80038fe:	46a2      	mov	sl, r4
 8003900:	eb19 090b 	adds.w	r9, r9, fp
 8003904:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003914:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003918:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800391c:	4689      	mov	r9, r1
 800391e:	4692      	mov	sl, r2
 8003920:	eb1b 0509 	adds.w	r5, fp, r9
 8003924:	eb4c 060a 	adc.w	r6, ip, sl
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4619      	mov	r1, r3
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	f04f 0400 	mov.w	r4, #0
 800393a:	0094      	lsls	r4, r2, #2
 800393c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003940:	008b      	lsls	r3, r1, #2
 8003942:	461a      	mov	r2, r3
 8003944:	4623      	mov	r3, r4
 8003946:	4628      	mov	r0, r5
 8003948:	4631      	mov	r1, r6
 800394a:	f7fc fc99 	bl	8000280 <__aeabi_uldivmod>
 800394e:	4603      	mov	r3, r0
 8003950:	460c      	mov	r4, r1
 8003952:	461a      	mov	r2, r3
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <UART_SetConfig+0x6f4>)
 8003956:	fba3 1302 	umull	r1, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2164      	movs	r1, #100	; 0x64
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	3332      	adds	r3, #50	; 0x32
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <UART_SetConfig+0x6f4>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	f003 020f 	and.w	r2, r3, #15
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4442      	add	r2, r8
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	e7ff      	b.n	800397e <UART_SetConfig+0x6e2>
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003988:	40011000 	.word	0x40011000
 800398c:	40011400 	.word	0x40011400
 8003990:	51eb851f 	.word	0x51eb851f

08003994 <__libc_init_array>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4e0d      	ldr	r6, [pc, #52]	; (80039cc <__libc_init_array+0x38>)
 8003998:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <__libc_init_array+0x3c>)
 800399a:	1ba4      	subs	r4, r4, r6
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	2500      	movs	r5, #0
 80039a0:	42a5      	cmp	r5, r4
 80039a2:	d109      	bne.n	80039b8 <__libc_init_array+0x24>
 80039a4:	4e0b      	ldr	r6, [pc, #44]	; (80039d4 <__libc_init_array+0x40>)
 80039a6:	4c0c      	ldr	r4, [pc, #48]	; (80039d8 <__libc_init_array+0x44>)
 80039a8:	f000 fc2c 	bl	8004204 <_init>
 80039ac:	1ba4      	subs	r4, r4, r6
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	2500      	movs	r5, #0
 80039b2:	42a5      	cmp	r5, r4
 80039b4:	d105      	bne.n	80039c2 <__libc_init_array+0x2e>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039bc:	4798      	blx	r3
 80039be:	3501      	adds	r5, #1
 80039c0:	e7ee      	b.n	80039a0 <__libc_init_array+0xc>
 80039c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039c6:	4798      	blx	r3
 80039c8:	3501      	adds	r5, #1
 80039ca:	e7f2      	b.n	80039b2 <__libc_init_array+0x1e>
 80039cc:	08004328 	.word	0x08004328
 80039d0:	08004328 	.word	0x08004328
 80039d4:	08004328 	.word	0x08004328
 80039d8:	0800432c 	.word	0x0800432c

080039dc <siprintf>:
 80039dc:	b40e      	push	{r1, r2, r3}
 80039de:	b500      	push	{lr}
 80039e0:	b09c      	sub	sp, #112	; 0x70
 80039e2:	ab1d      	add	r3, sp, #116	; 0x74
 80039e4:	9002      	str	r0, [sp, #8]
 80039e6:	9006      	str	r0, [sp, #24]
 80039e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <siprintf+0x38>)
 80039ee:	9107      	str	r1, [sp, #28]
 80039f0:	9104      	str	r1, [sp, #16]
 80039f2:	4909      	ldr	r1, [pc, #36]	; (8003a18 <siprintf+0x3c>)
 80039f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f8:	9105      	str	r1, [sp, #20]
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	a902      	add	r1, sp, #8
 8003a00:	f000 f866 	bl	8003ad0 <_svfiprintf_r>
 8003a04:	9b02      	ldr	r3, [sp, #8]
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	b01c      	add	sp, #112	; 0x70
 8003a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a10:	b003      	add	sp, #12
 8003a12:	4770      	bx	lr
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	ffff0208 	.word	0xffff0208

08003a1c <__ssputs_r>:
 8003a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a20:	688e      	ldr	r6, [r1, #8]
 8003a22:	429e      	cmp	r6, r3
 8003a24:	4682      	mov	sl, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4690      	mov	r8, r2
 8003a2a:	4699      	mov	r9, r3
 8003a2c:	d837      	bhi.n	8003a9e <__ssputs_r+0x82>
 8003a2e:	898a      	ldrh	r2, [r1, #12]
 8003a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a34:	d031      	beq.n	8003a9a <__ssputs_r+0x7e>
 8003a36:	6825      	ldr	r5, [r4, #0]
 8003a38:	6909      	ldr	r1, [r1, #16]
 8003a3a:	1a6f      	subs	r7, r5, r1
 8003a3c:	6965      	ldr	r5, [r4, #20]
 8003a3e:	2302      	movs	r3, #2
 8003a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a44:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a48:	f109 0301 	add.w	r3, r9, #1
 8003a4c:	443b      	add	r3, r7
 8003a4e:	429d      	cmp	r5, r3
 8003a50:	bf38      	it	cc
 8003a52:	461d      	movcc	r5, r3
 8003a54:	0553      	lsls	r3, r2, #21
 8003a56:	d530      	bpl.n	8003aba <__ssputs_r+0x9e>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f000 fb2b 	bl	80040b4 <_malloc_r>
 8003a5e:	4606      	mov	r6, r0
 8003a60:	b950      	cbnz	r0, 8003a78 <__ssputs_r+0x5c>
 8003a62:	230c      	movs	r3, #12
 8003a64:	f8ca 3000 	str.w	r3, [sl]
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a78:	463a      	mov	r2, r7
 8003a7a:	6921      	ldr	r1, [r4, #16]
 8003a7c:	f000 faa8 	bl	8003fd0 <memcpy>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	6126      	str	r6, [r4, #16]
 8003a8e:	6165      	str	r5, [r4, #20]
 8003a90:	443e      	add	r6, r7
 8003a92:	1bed      	subs	r5, r5, r7
 8003a94:	6026      	str	r6, [r4, #0]
 8003a96:	60a5      	str	r5, [r4, #8]
 8003a98:	464e      	mov	r6, r9
 8003a9a:	454e      	cmp	r6, r9
 8003a9c:	d900      	bls.n	8003aa0 <__ssputs_r+0x84>
 8003a9e:	464e      	mov	r6, r9
 8003aa0:	4632      	mov	r2, r6
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	f000 fa9e 	bl	8003fe6 <memmove>
 8003aaa:	68a3      	ldr	r3, [r4, #8]
 8003aac:	1b9b      	subs	r3, r3, r6
 8003aae:	60a3      	str	r3, [r4, #8]
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	441e      	add	r6, r3
 8003ab4:	6026      	str	r6, [r4, #0]
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e7dc      	b.n	8003a74 <__ssputs_r+0x58>
 8003aba:	462a      	mov	r2, r5
 8003abc:	f000 fb54 	bl	8004168 <_realloc_r>
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d1e2      	bne.n	8003a8c <__ssputs_r+0x70>
 8003ac6:	6921      	ldr	r1, [r4, #16]
 8003ac8:	4650      	mov	r0, sl
 8003aca:	f000 faa5 	bl	8004018 <_free_r>
 8003ace:	e7c8      	b.n	8003a62 <__ssputs_r+0x46>

08003ad0 <_svfiprintf_r>:
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	898b      	ldrh	r3, [r1, #12]
 8003ad8:	061f      	lsls	r7, r3, #24
 8003ada:	b09d      	sub	sp, #116	; 0x74
 8003adc:	4680      	mov	r8, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	4616      	mov	r6, r2
 8003ae2:	d50f      	bpl.n	8003b04 <_svfiprintf_r+0x34>
 8003ae4:	690b      	ldr	r3, [r1, #16]
 8003ae6:	b96b      	cbnz	r3, 8003b04 <_svfiprintf_r+0x34>
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	f000 fae3 	bl	80040b4 <_malloc_r>
 8003aee:	6020      	str	r0, [r4, #0]
 8003af0:	6120      	str	r0, [r4, #16]
 8003af2:	b928      	cbnz	r0, 8003b00 <_svfiprintf_r+0x30>
 8003af4:	230c      	movs	r3, #12
 8003af6:	f8c8 3000 	str.w	r3, [r8]
 8003afa:	f04f 30ff 	mov.w	r0, #4294967295
 8003afe:	e0c8      	b.n	8003c92 <_svfiprintf_r+0x1c2>
 8003b00:	2340      	movs	r3, #64	; 0x40
 8003b02:	6163      	str	r3, [r4, #20]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9309      	str	r3, [sp, #36]	; 0x24
 8003b08:	2320      	movs	r3, #32
 8003b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b0e:	2330      	movs	r3, #48	; 0x30
 8003b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b14:	9503      	str	r5, [sp, #12]
 8003b16:	f04f 0b01 	mov.w	fp, #1
 8003b1a:	4637      	mov	r7, r6
 8003b1c:	463d      	mov	r5, r7
 8003b1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b22:	b10b      	cbz	r3, 8003b28 <_svfiprintf_r+0x58>
 8003b24:	2b25      	cmp	r3, #37	; 0x25
 8003b26:	d13e      	bne.n	8003ba6 <_svfiprintf_r+0xd6>
 8003b28:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b2c:	d00b      	beq.n	8003b46 <_svfiprintf_r+0x76>
 8003b2e:	4653      	mov	r3, sl
 8003b30:	4632      	mov	r2, r6
 8003b32:	4621      	mov	r1, r4
 8003b34:	4640      	mov	r0, r8
 8003b36:	f7ff ff71 	bl	8003a1c <__ssputs_r>
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	f000 80a4 	beq.w	8003c88 <_svfiprintf_r+0x1b8>
 8003b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b42:	4453      	add	r3, sl
 8003b44:	9309      	str	r3, [sp, #36]	; 0x24
 8003b46:	783b      	ldrb	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 809d 	beq.w	8003c88 <_svfiprintf_r+0x1b8>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	9307      	str	r3, [sp, #28]
 8003b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b60:	931a      	str	r3, [sp, #104]	; 0x68
 8003b62:	462f      	mov	r7, r5
 8003b64:	2205      	movs	r2, #5
 8003b66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b6a:	4850      	ldr	r0, [pc, #320]	; (8003cac <_svfiprintf_r+0x1dc>)
 8003b6c:	f7fc fb38 	bl	80001e0 <memchr>
 8003b70:	9b04      	ldr	r3, [sp, #16]
 8003b72:	b9d0      	cbnz	r0, 8003baa <_svfiprintf_r+0xda>
 8003b74:	06d9      	lsls	r1, r3, #27
 8003b76:	bf44      	itt	mi
 8003b78:	2220      	movmi	r2, #32
 8003b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b7e:	071a      	lsls	r2, r3, #28
 8003b80:	bf44      	itt	mi
 8003b82:	222b      	movmi	r2, #43	; 0x2b
 8003b84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b88:	782a      	ldrb	r2, [r5, #0]
 8003b8a:	2a2a      	cmp	r2, #42	; 0x2a
 8003b8c:	d015      	beq.n	8003bba <_svfiprintf_r+0xea>
 8003b8e:	9a07      	ldr	r2, [sp, #28]
 8003b90:	462f      	mov	r7, r5
 8003b92:	2000      	movs	r0, #0
 8003b94:	250a      	movs	r5, #10
 8003b96:	4639      	mov	r1, r7
 8003b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b9c:	3b30      	subs	r3, #48	; 0x30
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	d94d      	bls.n	8003c3e <_svfiprintf_r+0x16e>
 8003ba2:	b1b8      	cbz	r0, 8003bd4 <_svfiprintf_r+0x104>
 8003ba4:	e00f      	b.n	8003bc6 <_svfiprintf_r+0xf6>
 8003ba6:	462f      	mov	r7, r5
 8003ba8:	e7b8      	b.n	8003b1c <_svfiprintf_r+0x4c>
 8003baa:	4a40      	ldr	r2, [pc, #256]	; (8003cac <_svfiprintf_r+0x1dc>)
 8003bac:	1a80      	subs	r0, r0, r2
 8003bae:	fa0b f000 	lsl.w	r0, fp, r0
 8003bb2:	4318      	orrs	r0, r3
 8003bb4:	9004      	str	r0, [sp, #16]
 8003bb6:	463d      	mov	r5, r7
 8003bb8:	e7d3      	b.n	8003b62 <_svfiprintf_r+0x92>
 8003bba:	9a03      	ldr	r2, [sp, #12]
 8003bbc:	1d11      	adds	r1, r2, #4
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	9103      	str	r1, [sp, #12]
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	db01      	blt.n	8003bca <_svfiprintf_r+0xfa>
 8003bc6:	9207      	str	r2, [sp, #28]
 8003bc8:	e004      	b.n	8003bd4 <_svfiprintf_r+0x104>
 8003bca:	4252      	negs	r2, r2
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	9207      	str	r2, [sp, #28]
 8003bd2:	9304      	str	r3, [sp, #16]
 8003bd4:	783b      	ldrb	r3, [r7, #0]
 8003bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bd8:	d10c      	bne.n	8003bf4 <_svfiprintf_r+0x124>
 8003bda:	787b      	ldrb	r3, [r7, #1]
 8003bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bde:	d133      	bne.n	8003c48 <_svfiprintf_r+0x178>
 8003be0:	9b03      	ldr	r3, [sp, #12]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	9203      	str	r2, [sp, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bfb8      	it	lt
 8003bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf0:	3702      	adds	r7, #2
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	4d2e      	ldr	r5, [pc, #184]	; (8003cb0 <_svfiprintf_r+0x1e0>)
 8003bf6:	7839      	ldrb	r1, [r7, #0]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f7fc faf0 	bl	80001e0 <memchr>
 8003c00:	b138      	cbz	r0, 8003c12 <_svfiprintf_r+0x142>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	1b40      	subs	r0, r0, r5
 8003c06:	fa03 f000 	lsl.w	r0, r3, r0
 8003c0a:	9b04      	ldr	r3, [sp, #16]
 8003c0c:	4303      	orrs	r3, r0
 8003c0e:	3701      	adds	r7, #1
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	7839      	ldrb	r1, [r7, #0]
 8003c14:	4827      	ldr	r0, [pc, #156]	; (8003cb4 <_svfiprintf_r+0x1e4>)
 8003c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c1a:	2206      	movs	r2, #6
 8003c1c:	1c7e      	adds	r6, r7, #1
 8003c1e:	f7fc fadf 	bl	80001e0 <memchr>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d038      	beq.n	8003c98 <_svfiprintf_r+0x1c8>
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <_svfiprintf_r+0x1e8>)
 8003c28:	bb13      	cbnz	r3, 8003c70 <_svfiprintf_r+0x1a0>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	3307      	adds	r3, #7
 8003c2e:	f023 0307 	bic.w	r3, r3, #7
 8003c32:	3308      	adds	r3, #8
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c38:	444b      	add	r3, r9
 8003c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c3c:	e76d      	b.n	8003b1a <_svfiprintf_r+0x4a>
 8003c3e:	fb05 3202 	mla	r2, r5, r2, r3
 8003c42:	2001      	movs	r0, #1
 8003c44:	460f      	mov	r7, r1
 8003c46:	e7a6      	b.n	8003b96 <_svfiprintf_r+0xc6>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	3701      	adds	r7, #1
 8003c4c:	9305      	str	r3, [sp, #20]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	250a      	movs	r5, #10
 8003c52:	4638      	mov	r0, r7
 8003c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c58:	3a30      	subs	r2, #48	; 0x30
 8003c5a:	2a09      	cmp	r2, #9
 8003c5c:	d903      	bls.n	8003c66 <_svfiprintf_r+0x196>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0c8      	beq.n	8003bf4 <_svfiprintf_r+0x124>
 8003c62:	9105      	str	r1, [sp, #20]
 8003c64:	e7c6      	b.n	8003bf4 <_svfiprintf_r+0x124>
 8003c66:	fb05 2101 	mla	r1, r5, r1, r2
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	e7f0      	b.n	8003c52 <_svfiprintf_r+0x182>
 8003c70:	ab03      	add	r3, sp, #12
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4622      	mov	r2, r4
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <_svfiprintf_r+0x1ec>)
 8003c78:	a904      	add	r1, sp, #16
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	f3af 8000 	nop.w
 8003c80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c84:	4681      	mov	r9, r0
 8003c86:	d1d6      	bne.n	8003c36 <_svfiprintf_r+0x166>
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	065b      	lsls	r3, r3, #25
 8003c8c:	f53f af35 	bmi.w	8003afa <_svfiprintf_r+0x2a>
 8003c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c92:	b01d      	add	sp, #116	; 0x74
 8003c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c98:	ab03      	add	r3, sp, #12
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <_svfiprintf_r+0x1ec>)
 8003ca0:	a904      	add	r1, sp, #16
 8003ca2:	4640      	mov	r0, r8
 8003ca4:	f000 f882 	bl	8003dac <_printf_i>
 8003ca8:	e7ea      	b.n	8003c80 <_svfiprintf_r+0x1b0>
 8003caa:	bf00      	nop
 8003cac:	080042ec 	.word	0x080042ec
 8003cb0:	080042f2 	.word	0x080042f2
 8003cb4:	080042f6 	.word	0x080042f6
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	08003a1d 	.word	0x08003a1d

08003cc0 <_printf_common>:
 8003cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc4:	4691      	mov	r9, r2
 8003cc6:	461f      	mov	r7, r3
 8003cc8:	688a      	ldr	r2, [r1, #8]
 8003cca:	690b      	ldr	r3, [r1, #16]
 8003ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	bfb8      	it	lt
 8003cd4:	4613      	movlt	r3, r2
 8003cd6:	f8c9 3000 	str.w	r3, [r9]
 8003cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cde:	4606      	mov	r6, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	b112      	cbz	r2, 8003cea <_printf_common+0x2a>
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f8c9 3000 	str.w	r3, [r9]
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	0699      	lsls	r1, r3, #26
 8003cee:	bf42      	ittt	mi
 8003cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cf4:	3302      	addmi	r3, #2
 8003cf6:	f8c9 3000 	strmi.w	r3, [r9]
 8003cfa:	6825      	ldr	r5, [r4, #0]
 8003cfc:	f015 0506 	ands.w	r5, r5, #6
 8003d00:	d107      	bne.n	8003d12 <_printf_common+0x52>
 8003d02:	f104 0a19 	add.w	sl, r4, #25
 8003d06:	68e3      	ldr	r3, [r4, #12]
 8003d08:	f8d9 2000 	ldr.w	r2, [r9]
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	42ab      	cmp	r3, r5
 8003d10:	dc28      	bgt.n	8003d64 <_printf_common+0xa4>
 8003d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	3300      	adds	r3, #0
 8003d1a:	bf18      	it	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	0692      	lsls	r2, r2, #26
 8003d20:	d42d      	bmi.n	8003d7e <_printf_common+0xbe>
 8003d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d26:	4639      	mov	r1, r7
 8003d28:	4630      	mov	r0, r6
 8003d2a:	47c0      	blx	r8
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d020      	beq.n	8003d72 <_printf_common+0xb2>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	68e5      	ldr	r5, [r4, #12]
 8003d34:	f8d9 2000 	ldr.w	r2, [r9]
 8003d38:	f003 0306 	and.w	r3, r3, #6
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	bf08      	it	eq
 8003d40:	1aad      	subeq	r5, r5, r2
 8003d42:	68a3      	ldr	r3, [r4, #8]
 8003d44:	6922      	ldr	r2, [r4, #16]
 8003d46:	bf0c      	ite	eq
 8003d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d4c:	2500      	movne	r5, #0
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	bfc4      	itt	gt
 8003d52:	1a9b      	subgt	r3, r3, r2
 8003d54:	18ed      	addgt	r5, r5, r3
 8003d56:	f04f 0900 	mov.w	r9, #0
 8003d5a:	341a      	adds	r4, #26
 8003d5c:	454d      	cmp	r5, r9
 8003d5e:	d11a      	bne.n	8003d96 <_printf_common+0xd6>
 8003d60:	2000      	movs	r0, #0
 8003d62:	e008      	b.n	8003d76 <_printf_common+0xb6>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4652      	mov	r2, sl
 8003d68:	4639      	mov	r1, r7
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	47c0      	blx	r8
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d103      	bne.n	8003d7a <_printf_common+0xba>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7a:	3501      	adds	r5, #1
 8003d7c:	e7c3      	b.n	8003d06 <_printf_common+0x46>
 8003d7e:	18e1      	adds	r1, r4, r3
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	2030      	movs	r0, #48	; 0x30
 8003d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d88:	4422      	add	r2, r4
 8003d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d92:	3302      	adds	r3, #2
 8003d94:	e7c5      	b.n	8003d22 <_printf_common+0x62>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4622      	mov	r2, r4
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	47c0      	blx	r8
 8003da0:	3001      	adds	r0, #1
 8003da2:	d0e6      	beq.n	8003d72 <_printf_common+0xb2>
 8003da4:	f109 0901 	add.w	r9, r9, #1
 8003da8:	e7d8      	b.n	8003d5c <_printf_common+0x9c>
	...

08003dac <_printf_i>:
 8003dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003db0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003db4:	460c      	mov	r4, r1
 8003db6:	7e09      	ldrb	r1, [r1, #24]
 8003db8:	b085      	sub	sp, #20
 8003dba:	296e      	cmp	r1, #110	; 0x6e
 8003dbc:	4617      	mov	r7, r2
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	4698      	mov	r8, r3
 8003dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003dc4:	f000 80b3 	beq.w	8003f2e <_printf_i+0x182>
 8003dc8:	d822      	bhi.n	8003e10 <_printf_i+0x64>
 8003dca:	2963      	cmp	r1, #99	; 0x63
 8003dcc:	d036      	beq.n	8003e3c <_printf_i+0x90>
 8003dce:	d80a      	bhi.n	8003de6 <_printf_i+0x3a>
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	f000 80b9 	beq.w	8003f48 <_printf_i+0x19c>
 8003dd6:	2958      	cmp	r1, #88	; 0x58
 8003dd8:	f000 8083 	beq.w	8003ee2 <_printf_i+0x136>
 8003ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003de4:	e032      	b.n	8003e4c <_printf_i+0xa0>
 8003de6:	2964      	cmp	r1, #100	; 0x64
 8003de8:	d001      	beq.n	8003dee <_printf_i+0x42>
 8003dea:	2969      	cmp	r1, #105	; 0x69
 8003dec:	d1f6      	bne.n	8003ddc <_printf_i+0x30>
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	6813      	ldr	r3, [r2, #0]
 8003df2:	0605      	lsls	r5, r0, #24
 8003df4:	f103 0104 	add.w	r1, r3, #4
 8003df8:	d52a      	bpl.n	8003e50 <_printf_i+0xa4>
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da03      	bge.n	8003e0a <_printf_i+0x5e>
 8003e02:	222d      	movs	r2, #45	; 0x2d
 8003e04:	425b      	negs	r3, r3
 8003e06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e0a:	486f      	ldr	r0, [pc, #444]	; (8003fc8 <_printf_i+0x21c>)
 8003e0c:	220a      	movs	r2, #10
 8003e0e:	e039      	b.n	8003e84 <_printf_i+0xd8>
 8003e10:	2973      	cmp	r1, #115	; 0x73
 8003e12:	f000 809d 	beq.w	8003f50 <_printf_i+0x1a4>
 8003e16:	d808      	bhi.n	8003e2a <_printf_i+0x7e>
 8003e18:	296f      	cmp	r1, #111	; 0x6f
 8003e1a:	d020      	beq.n	8003e5e <_printf_i+0xb2>
 8003e1c:	2970      	cmp	r1, #112	; 0x70
 8003e1e:	d1dd      	bne.n	8003ddc <_printf_i+0x30>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	f043 0320 	orr.w	r3, r3, #32
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	e003      	b.n	8003e32 <_printf_i+0x86>
 8003e2a:	2975      	cmp	r1, #117	; 0x75
 8003e2c:	d017      	beq.n	8003e5e <_printf_i+0xb2>
 8003e2e:	2978      	cmp	r1, #120	; 0x78
 8003e30:	d1d4      	bne.n	8003ddc <_printf_i+0x30>
 8003e32:	2378      	movs	r3, #120	; 0x78
 8003e34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e38:	4864      	ldr	r0, [pc, #400]	; (8003fcc <_printf_i+0x220>)
 8003e3a:	e055      	b.n	8003ee8 <_printf_i+0x13c>
 8003e3c:	6813      	ldr	r3, [r2, #0]
 8003e3e:	1d19      	adds	r1, r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6011      	str	r1, [r2, #0]
 8003e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e08c      	b.n	8003f6a <_printf_i+0x1be>
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6011      	str	r1, [r2, #0]
 8003e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e58:	bf18      	it	ne
 8003e5a:	b21b      	sxthne	r3, r3
 8003e5c:	e7cf      	b.n	8003dfe <_printf_i+0x52>
 8003e5e:	6813      	ldr	r3, [r2, #0]
 8003e60:	6825      	ldr	r5, [r4, #0]
 8003e62:	1d18      	adds	r0, r3, #4
 8003e64:	6010      	str	r0, [r2, #0]
 8003e66:	0628      	lsls	r0, r5, #24
 8003e68:	d501      	bpl.n	8003e6e <_printf_i+0xc2>
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	e002      	b.n	8003e74 <_printf_i+0xc8>
 8003e6e:	0668      	lsls	r0, r5, #25
 8003e70:	d5fb      	bpl.n	8003e6a <_printf_i+0xbe>
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	4854      	ldr	r0, [pc, #336]	; (8003fc8 <_printf_i+0x21c>)
 8003e76:	296f      	cmp	r1, #111	; 0x6f
 8003e78:	bf14      	ite	ne
 8003e7a:	220a      	movne	r2, #10
 8003e7c:	2208      	moveq	r2, #8
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e84:	6865      	ldr	r5, [r4, #4]
 8003e86:	60a5      	str	r5, [r4, #8]
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	f2c0 8095 	blt.w	8003fb8 <_printf_i+0x20c>
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	f021 0104 	bic.w	r1, r1, #4
 8003e94:	6021      	str	r1, [r4, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d13d      	bne.n	8003f16 <_printf_i+0x16a>
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	f040 808e 	bne.w	8003fbc <_printf_i+0x210>
 8003ea0:	4665      	mov	r5, ip
 8003ea2:	2a08      	cmp	r2, #8
 8003ea4:	d10b      	bne.n	8003ebe <_printf_i+0x112>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	07db      	lsls	r3, r3, #31
 8003eaa:	d508      	bpl.n	8003ebe <_printf_i+0x112>
 8003eac:	6923      	ldr	r3, [r4, #16]
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	bfde      	ittt	le
 8003eb4:	2330      	movle	r3, #48	; 0x30
 8003eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ebe:	ebac 0305 	sub.w	r3, ip, r5
 8003ec2:	6123      	str	r3, [r4, #16]
 8003ec4:	f8cd 8000 	str.w	r8, [sp]
 8003ec8:	463b      	mov	r3, r7
 8003eca:	aa03      	add	r2, sp, #12
 8003ecc:	4621      	mov	r1, r4
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f7ff fef6 	bl	8003cc0 <_printf_common>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d14d      	bne.n	8003f74 <_printf_i+0x1c8>
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	b005      	add	sp, #20
 8003ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ee2:	4839      	ldr	r0, [pc, #228]	; (8003fc8 <_printf_i+0x21c>)
 8003ee4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ee8:	6813      	ldr	r3, [r2, #0]
 8003eea:	6821      	ldr	r1, [r4, #0]
 8003eec:	1d1d      	adds	r5, r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6015      	str	r5, [r2, #0]
 8003ef2:	060a      	lsls	r2, r1, #24
 8003ef4:	d50b      	bpl.n	8003f0e <_printf_i+0x162>
 8003ef6:	07ca      	lsls	r2, r1, #31
 8003ef8:	bf44      	itt	mi
 8003efa:	f041 0120 	orrmi.w	r1, r1, #32
 8003efe:	6021      	strmi	r1, [r4, #0]
 8003f00:	b91b      	cbnz	r3, 8003f0a <_printf_i+0x15e>
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	f022 0220 	bic.w	r2, r2, #32
 8003f08:	6022      	str	r2, [r4, #0]
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	e7b7      	b.n	8003e7e <_printf_i+0xd2>
 8003f0e:	064d      	lsls	r5, r1, #25
 8003f10:	bf48      	it	mi
 8003f12:	b29b      	uxthmi	r3, r3
 8003f14:	e7ef      	b.n	8003ef6 <_printf_i+0x14a>
 8003f16:	4665      	mov	r5, ip
 8003f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f1c:	fb02 3311 	mls	r3, r2, r1, r3
 8003f20:	5cc3      	ldrb	r3, [r0, r3]
 8003f22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f26:	460b      	mov	r3, r1
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d1f5      	bne.n	8003f18 <_printf_i+0x16c>
 8003f2c:	e7b9      	b.n	8003ea2 <_printf_i+0xf6>
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	6825      	ldr	r5, [r4, #0]
 8003f32:	6961      	ldr	r1, [r4, #20]
 8003f34:	1d18      	adds	r0, r3, #4
 8003f36:	6010      	str	r0, [r2, #0]
 8003f38:	0628      	lsls	r0, r5, #24
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	d501      	bpl.n	8003f42 <_printf_i+0x196>
 8003f3e:	6019      	str	r1, [r3, #0]
 8003f40:	e002      	b.n	8003f48 <_printf_i+0x19c>
 8003f42:	066a      	lsls	r2, r5, #25
 8003f44:	d5fb      	bpl.n	8003f3e <_printf_i+0x192>
 8003f46:	8019      	strh	r1, [r3, #0]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	4665      	mov	r5, ip
 8003f4e:	e7b9      	b.n	8003ec4 <_printf_i+0x118>
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	1d19      	adds	r1, r3, #4
 8003f54:	6011      	str	r1, [r2, #0]
 8003f56:	681d      	ldr	r5, [r3, #0]
 8003f58:	6862      	ldr	r2, [r4, #4]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f7fc f93f 	bl	80001e0 <memchr>
 8003f62:	b108      	cbz	r0, 8003f68 <_printf_i+0x1bc>
 8003f64:	1b40      	subs	r0, r0, r5
 8003f66:	6060      	str	r0, [r4, #4]
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	6123      	str	r3, [r4, #16]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f72:	e7a7      	b.n	8003ec4 <_printf_i+0x118>
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	462a      	mov	r2, r5
 8003f78:	4639      	mov	r1, r7
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	47c0      	blx	r8
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d0aa      	beq.n	8003ed8 <_printf_i+0x12c>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	079b      	lsls	r3, r3, #30
 8003f86:	d413      	bmi.n	8003fb0 <_printf_i+0x204>
 8003f88:	68e0      	ldr	r0, [r4, #12]
 8003f8a:	9b03      	ldr	r3, [sp, #12]
 8003f8c:	4298      	cmp	r0, r3
 8003f8e:	bfb8      	it	lt
 8003f90:	4618      	movlt	r0, r3
 8003f92:	e7a3      	b.n	8003edc <_printf_i+0x130>
 8003f94:	2301      	movs	r3, #1
 8003f96:	464a      	mov	r2, r9
 8003f98:	4639      	mov	r1, r7
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	47c0      	blx	r8
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d09a      	beq.n	8003ed8 <_printf_i+0x12c>
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	68e3      	ldr	r3, [r4, #12]
 8003fa6:	9a03      	ldr	r2, [sp, #12]
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	42ab      	cmp	r3, r5
 8003fac:	dcf2      	bgt.n	8003f94 <_printf_i+0x1e8>
 8003fae:	e7eb      	b.n	8003f88 <_printf_i+0x1dc>
 8003fb0:	2500      	movs	r5, #0
 8003fb2:	f104 0919 	add.w	r9, r4, #25
 8003fb6:	e7f5      	b.n	8003fa4 <_printf_i+0x1f8>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ac      	bne.n	8003f16 <_printf_i+0x16a>
 8003fbc:	7803      	ldrb	r3, [r0, #0]
 8003fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc6:	e76c      	b.n	8003ea2 <_printf_i+0xf6>
 8003fc8:	080042fd 	.word	0x080042fd
 8003fcc:	0800430e 	.word	0x0800430e

08003fd0 <memcpy>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	1e43      	subs	r3, r0, #1
 8003fd4:	440a      	add	r2, r1
 8003fd6:	4291      	cmp	r1, r2
 8003fd8:	d100      	bne.n	8003fdc <memcpy+0xc>
 8003fda:	bd10      	pop	{r4, pc}
 8003fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fe4:	e7f7      	b.n	8003fd6 <memcpy+0x6>

08003fe6 <memmove>:
 8003fe6:	4288      	cmp	r0, r1
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	eb01 0302 	add.w	r3, r1, r2
 8003fee:	d807      	bhi.n	8004000 <memmove+0x1a>
 8003ff0:	1e42      	subs	r2, r0, #1
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	d00a      	beq.n	800400c <memmove+0x26>
 8003ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ffe:	e7f8      	b.n	8003ff2 <memmove+0xc>
 8004000:	4283      	cmp	r3, r0
 8004002:	d9f5      	bls.n	8003ff0 <memmove+0xa>
 8004004:	1881      	adds	r1, r0, r2
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	42d3      	cmn	r3, r2
 800400a:	d100      	bne.n	800400e <memmove+0x28>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004012:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004016:	e7f7      	b.n	8004008 <memmove+0x22>

08004018 <_free_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4605      	mov	r5, r0
 800401c:	2900      	cmp	r1, #0
 800401e:	d045      	beq.n	80040ac <_free_r+0x94>
 8004020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004024:	1f0c      	subs	r4, r1, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfb8      	it	lt
 800402a:	18e4      	addlt	r4, r4, r3
 800402c:	f000 f8d2 	bl	80041d4 <__malloc_lock>
 8004030:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <_free_r+0x98>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	4610      	mov	r0, r2
 8004036:	b933      	cbnz	r3, 8004046 <_free_r+0x2e>
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	6014      	str	r4, [r2, #0]
 800403c:	4628      	mov	r0, r5
 800403e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004042:	f000 b8c8 	b.w	80041d6 <__malloc_unlock>
 8004046:	42a3      	cmp	r3, r4
 8004048:	d90c      	bls.n	8004064 <_free_r+0x4c>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	1862      	adds	r2, r4, r1
 800404e:	4293      	cmp	r3, r2
 8004050:	bf04      	itt	eq
 8004052:	681a      	ldreq	r2, [r3, #0]
 8004054:	685b      	ldreq	r3, [r3, #4]
 8004056:	6063      	str	r3, [r4, #4]
 8004058:	bf04      	itt	eq
 800405a:	1852      	addeq	r2, r2, r1
 800405c:	6022      	streq	r2, [r4, #0]
 800405e:	6004      	str	r4, [r0, #0]
 8004060:	e7ec      	b.n	800403c <_free_r+0x24>
 8004062:	4613      	mov	r3, r2
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	b10a      	cbz	r2, 800406c <_free_r+0x54>
 8004068:	42a2      	cmp	r2, r4
 800406a:	d9fa      	bls.n	8004062 <_free_r+0x4a>
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	1858      	adds	r0, r3, r1
 8004070:	42a0      	cmp	r0, r4
 8004072:	d10b      	bne.n	800408c <_free_r+0x74>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	4401      	add	r1, r0
 8004078:	1858      	adds	r0, r3, r1
 800407a:	4282      	cmp	r2, r0
 800407c:	6019      	str	r1, [r3, #0]
 800407e:	d1dd      	bne.n	800403c <_free_r+0x24>
 8004080:	6810      	ldr	r0, [r2, #0]
 8004082:	6852      	ldr	r2, [r2, #4]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	4401      	add	r1, r0
 8004088:	6019      	str	r1, [r3, #0]
 800408a:	e7d7      	b.n	800403c <_free_r+0x24>
 800408c:	d902      	bls.n	8004094 <_free_r+0x7c>
 800408e:	230c      	movs	r3, #12
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	e7d3      	b.n	800403c <_free_r+0x24>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428a      	cmp	r2, r1
 800409a:	bf04      	itt	eq
 800409c:	6811      	ldreq	r1, [r2, #0]
 800409e:	6852      	ldreq	r2, [r2, #4]
 80040a0:	6062      	str	r2, [r4, #4]
 80040a2:	bf04      	itt	eq
 80040a4:	1809      	addeq	r1, r1, r0
 80040a6:	6021      	streq	r1, [r4, #0]
 80040a8:	605c      	str	r4, [r3, #4]
 80040aa:	e7c7      	b.n	800403c <_free_r+0x24>
 80040ac:	bd38      	pop	{r3, r4, r5, pc}
 80040ae:	bf00      	nop
 80040b0:	20000090 	.word	0x20000090

080040b4 <_malloc_r>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	1ccd      	adds	r5, r1, #3
 80040b8:	f025 0503 	bic.w	r5, r5, #3
 80040bc:	3508      	adds	r5, #8
 80040be:	2d0c      	cmp	r5, #12
 80040c0:	bf38      	it	cc
 80040c2:	250c      	movcc	r5, #12
 80040c4:	2d00      	cmp	r5, #0
 80040c6:	4606      	mov	r6, r0
 80040c8:	db01      	blt.n	80040ce <_malloc_r+0x1a>
 80040ca:	42a9      	cmp	r1, r5
 80040cc:	d903      	bls.n	80040d6 <_malloc_r+0x22>
 80040ce:	230c      	movs	r3, #12
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	2000      	movs	r0, #0
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
 80040d6:	f000 f87d 	bl	80041d4 <__malloc_lock>
 80040da:	4a21      	ldr	r2, [pc, #132]	; (8004160 <_malloc_r+0xac>)
 80040dc:	6814      	ldr	r4, [r2, #0]
 80040de:	4621      	mov	r1, r4
 80040e0:	b991      	cbnz	r1, 8004108 <_malloc_r+0x54>
 80040e2:	4c20      	ldr	r4, [pc, #128]	; (8004164 <_malloc_r+0xb0>)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	b91b      	cbnz	r3, 80040f0 <_malloc_r+0x3c>
 80040e8:	4630      	mov	r0, r6
 80040ea:	f000 f863 	bl	80041b4 <_sbrk_r>
 80040ee:	6020      	str	r0, [r4, #0]
 80040f0:	4629      	mov	r1, r5
 80040f2:	4630      	mov	r0, r6
 80040f4:	f000 f85e 	bl	80041b4 <_sbrk_r>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d124      	bne.n	8004146 <_malloc_r+0x92>
 80040fc:	230c      	movs	r3, #12
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f868 	bl	80041d6 <__malloc_unlock>
 8004106:	e7e4      	b.n	80040d2 <_malloc_r+0x1e>
 8004108:	680b      	ldr	r3, [r1, #0]
 800410a:	1b5b      	subs	r3, r3, r5
 800410c:	d418      	bmi.n	8004140 <_malloc_r+0x8c>
 800410e:	2b0b      	cmp	r3, #11
 8004110:	d90f      	bls.n	8004132 <_malloc_r+0x7e>
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	50cd      	str	r5, [r1, r3]
 8004116:	18cc      	adds	r4, r1, r3
 8004118:	4630      	mov	r0, r6
 800411a:	f000 f85c 	bl	80041d6 <__malloc_unlock>
 800411e:	f104 000b 	add.w	r0, r4, #11
 8004122:	1d23      	adds	r3, r4, #4
 8004124:	f020 0007 	bic.w	r0, r0, #7
 8004128:	1ac3      	subs	r3, r0, r3
 800412a:	d0d3      	beq.n	80040d4 <_malloc_r+0x20>
 800412c:	425a      	negs	r2, r3
 800412e:	50e2      	str	r2, [r4, r3]
 8004130:	e7d0      	b.n	80040d4 <_malloc_r+0x20>
 8004132:	428c      	cmp	r4, r1
 8004134:	684b      	ldr	r3, [r1, #4]
 8004136:	bf16      	itet	ne
 8004138:	6063      	strne	r3, [r4, #4]
 800413a:	6013      	streq	r3, [r2, #0]
 800413c:	460c      	movne	r4, r1
 800413e:	e7eb      	b.n	8004118 <_malloc_r+0x64>
 8004140:	460c      	mov	r4, r1
 8004142:	6849      	ldr	r1, [r1, #4]
 8004144:	e7cc      	b.n	80040e0 <_malloc_r+0x2c>
 8004146:	1cc4      	adds	r4, r0, #3
 8004148:	f024 0403 	bic.w	r4, r4, #3
 800414c:	42a0      	cmp	r0, r4
 800414e:	d005      	beq.n	800415c <_malloc_r+0xa8>
 8004150:	1a21      	subs	r1, r4, r0
 8004152:	4630      	mov	r0, r6
 8004154:	f000 f82e 	bl	80041b4 <_sbrk_r>
 8004158:	3001      	adds	r0, #1
 800415a:	d0cf      	beq.n	80040fc <_malloc_r+0x48>
 800415c:	6025      	str	r5, [r4, #0]
 800415e:	e7db      	b.n	8004118 <_malloc_r+0x64>
 8004160:	20000090 	.word	0x20000090
 8004164:	20000094 	.word	0x20000094

08004168 <_realloc_r>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	4607      	mov	r7, r0
 800416c:	4614      	mov	r4, r2
 800416e:	460e      	mov	r6, r1
 8004170:	b921      	cbnz	r1, 800417c <_realloc_r+0x14>
 8004172:	4611      	mov	r1, r2
 8004174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004178:	f7ff bf9c 	b.w	80040b4 <_malloc_r>
 800417c:	b922      	cbnz	r2, 8004188 <_realloc_r+0x20>
 800417e:	f7ff ff4b 	bl	8004018 <_free_r>
 8004182:	4625      	mov	r5, r4
 8004184:	4628      	mov	r0, r5
 8004186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004188:	f000 f826 	bl	80041d8 <_malloc_usable_size_r>
 800418c:	42a0      	cmp	r0, r4
 800418e:	d20f      	bcs.n	80041b0 <_realloc_r+0x48>
 8004190:	4621      	mov	r1, r4
 8004192:	4638      	mov	r0, r7
 8004194:	f7ff ff8e 	bl	80040b4 <_malloc_r>
 8004198:	4605      	mov	r5, r0
 800419a:	2800      	cmp	r0, #0
 800419c:	d0f2      	beq.n	8004184 <_realloc_r+0x1c>
 800419e:	4631      	mov	r1, r6
 80041a0:	4622      	mov	r2, r4
 80041a2:	f7ff ff15 	bl	8003fd0 <memcpy>
 80041a6:	4631      	mov	r1, r6
 80041a8:	4638      	mov	r0, r7
 80041aa:	f7ff ff35 	bl	8004018 <_free_r>
 80041ae:	e7e9      	b.n	8004184 <_realloc_r+0x1c>
 80041b0:	4635      	mov	r5, r6
 80041b2:	e7e7      	b.n	8004184 <_realloc_r+0x1c>

080041b4 <_sbrk_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4c06      	ldr	r4, [pc, #24]	; (80041d0 <_sbrk_r+0x1c>)
 80041b8:	2300      	movs	r3, #0
 80041ba:	4605      	mov	r5, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	f000 f812 	bl	80041e8 <_sbrk>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_sbrk_r+0x1a>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_sbrk_r+0x1a>
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	20000164 	.word	0x20000164

080041d4 <__malloc_lock>:
 80041d4:	4770      	bx	lr

080041d6 <__malloc_unlock>:
 80041d6:	4770      	bx	lr

080041d8 <_malloc_usable_size_r>:
 80041d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041dc:	1f18      	subs	r0, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfbc      	itt	lt
 80041e2:	580b      	ldrlt	r3, [r1, r0]
 80041e4:	18c0      	addlt	r0, r0, r3
 80041e6:	4770      	bx	lr

080041e8 <_sbrk>:
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <_sbrk+0x14>)
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	4602      	mov	r2, r0
 80041ee:	b909      	cbnz	r1, 80041f4 <_sbrk+0xc>
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <_sbrk+0x18>)
 80041f2:	6019      	str	r1, [r3, #0]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	4402      	add	r2, r0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	4770      	bx	lr
 80041fc:	20000098 	.word	0x20000098
 8004200:	20000168 	.word	0x20000168

08004204 <_init>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	bf00      	nop
 8004208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420a:	bc08      	pop	{r3}
 800420c:	469e      	mov	lr, r3
 800420e:	4770      	bx	lr

08004210 <_fini>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	bf00      	nop
 8004214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004216:	bc08      	pop	{r3}
 8004218:	469e      	mov	lr, r3
 800421a:	4770      	bx	lr
